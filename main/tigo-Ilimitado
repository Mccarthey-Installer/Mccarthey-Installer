#!/bin/bash
echo "‚úÖ Script TIGO Ilimitado ejecutado correctamente."
set -e
export TZ="America/El_Salvador"
echo "üõ†Ô∏è Instalando dependencias..."

# Actualizar √≠ndices de paquetes
sudo apt update -y
sudo apt upgrade -y

# Instalar paquetes necesarios (corregido)
sudo apt install -y util-linux git cmake build-essential curl unzip wget \
python2 python2-dev python-is-python3 screen net-tools python3 python3-pip locales cpulimit

# Configurar locales
sudo sed -i '/es_SV.UTF-8/s/^# //g' /etc/locale.gen
sudo locale-gen
sudo update-locale LANG=es_SV.UTF-8
sudo timedatectl set-timezone America/El_Salvador

# ===========================
# 1. INSTALAR PROXY PYTHON EN PUERTO 80 (NOHUP)
# ===========================
echo "üåÄ Configurando proxy Python en puerto 80..."

mkdir -p /etc/ADMcgh

cat > /etc/ADMcgh/PDirect.py << 'EOF'
#!/usr/bin/env python2
# encoding: utf-8

import socket, threading, thread, select, signal, sys, time, getopt

LISTENING_ADDR = '0.0.0.0'
LISTENING_PORT = sys.argv[1] if sys.argv[1:] else 80
PASS = ''
BUFLEN = 4096 * 4
TIMEOUT = 60
DEFAULT_HOST = '127.0.0.1:22'
STATUS_RESP = '101'
FTAG = '\r\nContent-length: 0\r\n\r\nHTTP/1.1 200 Connection Established\r\n\r\n'
STATUS_TXT = '<strong style="color: #ff0000;">Kang Sae-byeok</strong>'
RESPONSE = "HTTP/1.1 " + str(STATUS_RESP) + ' ' + STATUS_TXT + ' ' + FTAG

class Server(threading.Thread):
    def __init__(self, host, port):
        threading.Thread.__init__(self)
        self.running = False
        self.host = host
        self.port = port
        self.threads = []
        self.threadsLock = threading.Lock()
        self.logLock = threading.Lock()
    def run(self):
        self.soc = socket.socket(socket.AF_INET)
        self.soc.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
        self.soc.settimeout(2)
        self.soc.bind((self.host, int(self.port)))
        self.soc.listen(0)
        self.running = True
        try:
            while self.running:
                try:
                    c, addr = self.soc.accept()
                    c.setblocking(1)
                except socket.timeout:
                    continue
                conn = ConnectionHandler(c, self, addr)
                conn.start()
                self.addConn(conn)
        finally:
            self.running = False
            self.soc.close()
    def printLog(self, log):
        self.logLock.acquire()
        print log
        self.logLock.release()
    def addConn(self, conn):
        try:
            self.threadsLock.acquire()
            if self.running:
                self.threads.append(conn)
        finally:
            self.threadsLock.release()
    def removeConn(self, conn):
        try:
            self.threadsLock.acquire()
            if conn in self.threads:
                self.threads.remove(conn)
        finally:
            self.threadsLock.release()
    def close(self):
        try:
            self.running = False
            self.threadsLock.acquire()
            threads = list(self.threads)
            for c in threads:
                c.close()
        finally:
            self.threadsLock.release()

class ConnectionHandler(threading.Thread):
    def __init__(self, socClient, server, addr):
        threading.Thread.__init__(self)
        self.clientClosed = False
        self.targetClosed = True
        self.client = socClient
        self.client_buffer = ''
        self.server = server
        self.log = 'Connection: ' + str(addr)
    def close(self):
        try:
            if not self.clientClosed:
                self.client.shutdown(socket.SHUT_RDWR)
                self.client.close()
        except:
            pass
        finally:
            self.clientClosed = True
        try:
            if not self.targetClosed:
                self.target.shutdown(socket.SHUT_RDWR)
                self.target.close()
        except:
            pass
        finally:
            self.targetClosed = True
    def run(self):
        try:
            self.client_buffer = self.client.recv(BUFLEN)
            hostPort = self.findHeader(self.client_buffer, 'X-Real-Host') or DEFAULT_HOST
            split = self.findHeader(self.client_buffer, 'X-Split')
            if split: self.client.recv(BUFLEN)
            passwd = self.findHeader(self.client_buffer, 'X-Pass')
            if PASS and passwd != PASS:
                self.client.send('HTTP/1.1 400 WrongPass!\r\n\r\n')
            elif hostPort.startswith('127.0.0.1') or hostPort.startswith('localhost') or not PASS:
                self.method_CONNECT(hostPort)
            else:
                self.client.send('HTTP/1.1 403 Forbidden!\r\n\r\n')
        except Exception as e:
            self.log += ' - error'
            self.server.printLog(self.log)
        finally:
            self.close()
            self.server.removeConn(self)
    def findHeader(self, head, header):
        aux = head.find(header + ': ')
        if aux == -1: return ''
        aux = head.find(':', aux)
        head = head[aux+2:]
        aux = head.find('\r\n')
        return head[:aux] if aux != -1 else ''
    def connect_target(self, host):
        i = host.find(':')
        port = int(host[i+1:]) if i != -1 else 22
        host = host[:i] if i != -1 else host
        (_, _, _, _, address) = socket.getaddrinfo(host, port)[0]
        self.target = socket.socket()
        self.targetClosed = False
        self.target.connect(address)
    def method_CONNECT(self, path):
        self.log += ' - CONNECT ' + path
        self.connect_target(path)
        self.client.sendall(RESPONSE)
        self.client_buffer = ''
        self.server.printLog(self.log)
        self.doCONNECT()
    def doCONNECT(self):
        socs = [self.client, self.target]
        count = 0
        while True:
            count += 1
            (recv, _, err) = select.select(socs, [], socs, 3)
            if err: break
            if recv:
                for in_ in recv:
                    try:
                        data = in_.recv(BUFLEN)
                        if data:
                            if in_ is self.target:
                                self.client.send(data)
                            else:
                                while data:
                                    sent = self.target.send(data)
                                    data = data[sent:]
                            count = 0
                        else:
                            return
                    except:
                        return
            if count == TIMEOUT:
                return

def parse_args(argv):
    global LISTENING_ADDR
    global LISTENING_PORT
    try:
        opts, args = getopt.getopt(argv,"hb:p:",["bind=","port="])
    except:
        sys.exit(2)
    for opt, arg in opts:
        if opt in ("-b", "--bind"):
            LISTENING_ADDR = arg
        elif opt in ("-p", "--port"):
            LISTENING_PORT = int(arg)

def main(host=LISTENING_ADDR, port=LISTENING_PORT):
    print "üåê PROXY HTTP MCCARTHEY - VPS TUNNEL"
    print "IP:", host
    print "PORTA:", port
    print "üîê Powered by MCC-KEY System üíé"
    server = Server(host, port)
    server.start()
    while True:
        try:
            time.sleep(2)
        except KeyboardInterrupt:
            print 'Parando...'
            server.close()
            break

if __name__ == '__main__':
    parse_args(sys.argv[1:])
    main()
EOF

chmod +x /etc/ADMcgh/PDirect.py

# Iniciar con nohup
nohup python2 /etc/ADMcgh/PDirect.py 80 > /root/nohup.out 2>&1 &

# ===========================
# 2. BADVPN PUERTOS 7200 Y 7300
# ===========================
echo "üì° Compilando y configurando BadVPN..."
rm -rf /opt/badvpn
git clone https://github.com/ambrop72/badvpn.git /opt/badvpn
mkdir -p /opt/badvpn/build && cd /opt/badvpn/build
cmake .. -DBUILD_NOTHING_BY_DEFAULT=1 -DBUILD_UDPGW=1
make -j$(nproc)
cp udpgw/badvpn-udpgw /usr/bin/
chmod +x /usr/bin/badvpn-udpgw

screen -S badvpn -X quit || true
screen -S badUDP72 -X quit || true

screen -dmS badvpn /usr/bin/badvpn-udpgw --listen-addr 127.0.0.1:7300 \
  --max-clients 1000 --max-connections-for-client 10
screen -dmS badUDP72 /usr/bin/badvpn-udpgw --listen-addr 127.0.0.1:7200 \
  --max-clients 1000 --max-connections-for-client 10

# ===========================
# 3. AUTOINICIO /etc/rc.local
# ===========================
echo "üß© Configurando autoarranque v√≠a rc.local..."

cat > /etc/rc.local <<EOF
#!/bin/bash
sleep 10
nohup python2 /etc/ADMcgh/PDirect.py 80 > /root/nohup.out 2>&1 &
screen -dmS badvpn /usr/bin/badvpn-udpgw --listen-addr 127.0.0.1:7300 --max-clients 1000 --max-connections-for-client 10
screen -dmS badUDP72 /usr/bin/badvpn-udpgw --listen-addr 127.0.0.1:7200 --max-clients 1000 --max-connections-for-client 10
exit 0
EOF

chmod +x /etc/rc.local

cat > /etc/systemd/system/rc-local.service <<EOF
[Unit]
Description=/etc/rc.local Compatibility
ConditionPathExists=/etc/rc.local

[Service]
Type=forking
ExecStart=/etc/rc.local start
TimeoutSec=0
StandardOutput=tty
RemainAfterExit=yes
SysVStartPriority=99

[Install]
WantedBy=multi-user.target
EOF

systemctl daemon-reload
systemctl enable rc-local
systemctl start rc-local

# ===========================
# 4. INSTALAR SCRIPT DE GESTI√ìN DE RECURSOS
# ===========================
echo "üõ†Ô∏è Configurando gesti√≥n de RAM y CPU..."

cat > /root/gestionar_recursos.sh << 'EOF'
#!/bin/bash
# Script: gestionar_recursos.sh
# Combina liberaci√≥n de RAM, ejecuci√≥n de scrip.sh mon y limitaci√≥n din√°mica de CPU
LOCK_FILE="/tmp/gestionar_recursos.lock"
LOG_FILE="/var/log/gestionar_recursos.log"
PID_FILE="/tmp/cpulimit_pids.txt"

# Verificar si el script ya est√° en ejecuci√≥n
if [ -f "$LOCK_FILE" ]; then
    echo "$(date): Proceso ya en ejecuci√≥n, saliendo..." >> "$LOG_FILE"
    exit 1
fi

touch "$LOCK_FILE"
trap 'rm -f "$LOCK_FILE"; exit' INT TERM EXIT

# Funci√≥n para limpiar procesos cpulimit previos
cleanup_cpulimit() {
    if [ -f "$PID_FILE" ]; then
        while read -r cpid; do
            if ps -p "$cpid" > /dev/null; then
                kill -9 "$cpid" 2>/dev/null
            fi
        done < "$PID_FILE"
        > "$PID_FILE" # Vaciar el archivo de PIDs
    fi
    pkill -9 -f "cpulimit -p" 2>/dev/null
    pkill -9 -f "pgrep -f /etc/ADMcgh/PDirect.py" 2>/dev/null
}

# Limpieza inicial
cleanup_cpulimit

# Arrancar scrip.sh mon si no est√° corriendo
if ! pgrep -f "/root/scrip.sh mon" > /dev/null; then
    /bin/bash /root/scrip.sh mon &
    echo "$(date): Iniciado /root/scrip.sh mon" >> "$LOG_FILE"
fi

# Variables para umbrales
MEM_THRESHOLD=200    # Memoria libre en MB
CACHE_THRESHOLD=100  # Cach√© en MB
LOAD_THRESHOLD=2.0   # Carga CPU (ajusta seg√∫n n√∫cleos)

# Variables para rastrear PIDs anteriores
PREV_PIDS_PDIRECT=""
PREV_PIDS_BADVPN=""
PREV_PIDS_SCRIP=""

while true; do
    # Verificar memoria
    FREE_MEM=$(free -m | awk '/Mem:/ {print $4}')
    CACHE_MEM=$(free -m | awk '/Mem:/ {print $6}')
    
    # Liberar cach√© si es necesario
    if [ "$FREE_MEM" -lt "$MEM_THRESHOLD" ] || [ "$CACHE_MEM" -gt "$CACHE_THRESHOLD" ]; then
        echo "$(date): Memoria libre: $FREE_MEM MB, Cach√©: $CACHE_MEM MB. Liberando cach√© completa..." >> "$LOG_FILE"
        sync
        sudo sysctl -w vm.drop_caches=3 > /dev/null
        NEW_FREE=$(free -m | awk '/Mem:/ {print $4}')
        echo "$(date): Cach√© liberado. Memoria libre ahora: $NEW_FREE MB" >> "$LOG_FILE"
    else
        echo "$(date): No es necesario liberar cach√© (Libre: $FREE_MEM MB, Cach√©: $CACHE_MEM MB)" >> "$LOG_FILE"
    fi

    # Verificar carga de CPU
    LOAD_AVG=$(awk '{print $1}' /proc/loadavg)
    
    # Controlar picos de CPU si la carga es alta
    if (( $(echo "$LOAD_AVG > $LOAD_THRESHOLD" | bc -l) )); then
        echo "$(date): Carga CPU alta: $LOAD_AVG. Limitando procesos intensivos..." >> "$LOG_FILE"
        
        # Obtener PIDs actuales
        CURRENT_PIDS_PDIRECT=$(pgrep -f /etc/ADMcgh/PDirect.py)
        CURRENT_PIDS_BADVPN=$(pgrep -f badvpn-udpgw)
        CURRENT_PIDS_SCRIP=$(pgrep -f "/root/scrip.sh mon")

        # Verificar si hay cambios en los PIDs
        if [ "$CURRENT_PIDS_PDIRECT" != "$PREV_PIDS_PDIRECT" ] || [ "$CURRENT_PIDS_BADVPN" != "$PREV_PIDS_BADVPN" ] || [ "$CURRENT_PIDS_SCRIP" != "$PREV_PIDS_SCRIP" ]; then
            cleanup_cpulimit

            # Limitar PDirect.py a 20%
            for pid in $CURRENT_PIDS_PDIRECT; do
                if ps -p "$pid" > /dev/null; then
                    cpulimit -p "$pid" -l 20 &
                    echo $! >> "$PID_FILE"
                    echo "$(date): Limitando PID $pid (PDirect.py) a 20% CPU" >> "$LOG_FILE"
                fi
            done

            # Limitar badvpn-udpgw a 30%
            for pid in $CURRENT_PIDS_BADVPN; do
                if ps -p "$pid" > /dev/null; then
                    cpulimit -p "$pid" -l 30 &
                    echo $! >> "$PID_FILE"
                    echo "$(date): Limitando PID $pid (badvpn-udpgw) a 30% CPU" >> "$LOG_FILE"
                fi
            done

            # Limitar scrip.sh a 10%
            for pid in $CURRENT_PIDS_SCRIP; do
                if ps -p "$pid" > /dev/null; then
                    cpulimit -p "$pid" -l 10 &
                    echo $! >> "$PID_FILE"
                    echo "$(date): Limitando PID $pid (scrip.sh) a 10% CPU" >> "$LOG_FILE"
                fi
            done

            # Actualizar PIDs anteriores
            PREV_PIDS_PDIRECT="$CURRENT_PIDS_PDIRECT"
            PREV_PIDS_BADVPN="$CURRENT_PIDS_BADVPN"
            PREV_PIDS_SCRIP="$CURRENT_PIDS_SCRIP"
        fi
    else
        echo "$(date): Carga CPU aceptable: $LOAD_AVG. No se requiere acci√≥n." >> "$LOG_FILE"
    fi

    sleep 10
done
EOF

chmod +x /root/gestionar_recursos.sh

# Crear archivo systemd para gesti√≥n de recursos
cat > /etc/systemd/system/gestionar-recursos.service <<EOF
[Unit]
Description=Gestiona RAM y CPU (liberar cach√© y limitar procesos)
After=network.target

[Service]
Type=simple
User=root
ExecStart=/bin/bash /root/gestionar_recursos.sh
ExecStop=/bin/bash -c "pkill -9 -f 'cpulimit -p'; pkill -9 -f 'pgrep -f /etc/ADMcgh/PDirect.py'; pkill -9 -f 'pgrep -f badvpn-udpgw'; pkill -9 -f 'pgrep -f /root/scrip.sh mon'; rm -f /tmp/cpulimit_pids.txt"
Restart=always
RestartSec=5s

[Install]
WantedBy=multi-user.target
EOF

chmod 644 /etc/systemd/system/gestionar-recursos.service
systemctl daemon-reload
systemctl enable gestionar-recursos.service
systemctl start gestionar-recursos.service

# ===========================
# 5. MENSAJE FINAL
# ===========================
echo ""
echo "======================================"
echo "‚úÖ INSTALACI√ìN COMPLETA DE MCCARTHY VPN"
echo "üì¶ Puertos activos:"
ss -tulnp | grep -E ':80|:7200|:7300' || true
echo ""
echo "üõ°Ô∏è  Proxy HTTP (80 -> 22) ACTIVO via Nohup"
echo "üéØ Listo para usar con HTTP Injector"
echo "üíé Firma personalizada: Kang Sae-byeok"
echo "üõ†Ô∏è Gesti√≥n de RAM y CPU activa (servicio: gestionar-recursos)"
echo "======================================"
echo ""

exit 0
