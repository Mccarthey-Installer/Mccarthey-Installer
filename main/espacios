#!/bin/bash
export TZ="America/El_Salvador"
export LANG=es_ES.UTF-8
timedatectl set-timezone America/El_Salvador

# Forzar soporte de colores ANSI
export TERM=xterm-256color

REGISTROS="/root/reg.txt"
HISTORIAL="/root/log.txt"
PIDFILE="/var/run/mon.pid"

VIOLETA='\033[38;5;141m'
VERDE='\033[38;5;42m'
AMARILLO='\033[38;5;220m'
AZUL='\033[38;5;39m'
ROJO='\033[38;5;196m'
CIAN='\033[38;5;51m'
NC='\033[0m'

# Verificar si el terminal soporta colores
if ! tput colors >/dev/null 2>&1 || [ "$(tput colors)" -lt 8 ]; then
    echo "$(date '+%Y-%m-%d %H:%M:%S'):Terminal no soporta colores ANSI o soporta menos de 8 colores. Desactivando colores." >> "$HISTORIAL" 2>/dev/null
    VIOLETA=''
    VERDE=''
    AMARILLO=''
    AZUL=''
    ROJO=''
    CIAN=''
    NC=''
fi

# Funci√≥n para configurar la autoejecuci√≥n en ~/.bashrc
function configurar_autoejecucion() {
    BASHRC="/root/.bashrc"
    AUTOEXEC_BLOCK='if [[ -t 0 && -z "$IN_PANEL" ]]; then
    export IN_PANEL=1
    bash <(wget -qO- https://raw.githubusercontent.com/Mccarthey-Installer/Mccarthey-Installer/main/main/espacios)
    unset IN_PANEL
fi'

    if ! grep -Fx "$AUTOEXEC_BLOCK" "$BASHRC" >/dev/null 2>&1; then
        echo -e "\n$AUTOEXEC_BLOCK" >> "$BASHRC"
        echo -e "${VERDE}Autoejecuci√≥n configurada en $BASHRC. El men√∫ se cargar√° autom√°ticamente en la pr√≥xima sesi√≥n.${NC}"
    fi
}

# Funci√≥n para crear usuarios SSH
function crear_registro() {
    clear
    echo -e "${VIOLETA}===== ü§™ CREAR USUARIO SSH =====${NC}"

    # Verificar permisos de escritura en REGISTROS
    if [[ ! -f "$REGISTROS" ]]; then
        touch "$REGISTROS" 2>/dev/null || {
            echo -e "${ROJO}‚ùå No se pudo crear $REGISTROS. Revisa permisos y sistema de archivos.${NC}"
            read -p "$(echo -e ${CIAN}Presiona Enter para continuar...${NC})"
            return 1
        }
    fi
    if [[ ! -w "$REGISTROS" ]]; then
        echo -e "${ROJO}‚ùå No se puede escribir en $REGISTROS. Revisa permisos.${NC}"
        read -p "$(echo -e ${CIAN}Presiona Enter para continuar...${NC})"
        return 1
    fi

    # Verificar permisos de escritura en HISTORIAL
    if [[ ! -f "$HISTORIAL" ]]; then
        touch "$HISTORIAL" 2>/dev/null || {
            echo -e "${ROJO}‚ùå No se pudo crear $HISTORIAL. Revisa permisos y sistema de archivos.${NC}"
            echo "$(date '+%Y-%m-%d %H:%M:%S'):No se pudo crear $HISTORIAL" >> "$HISTORIAL" 2>/dev/null
            read -p "$(echo -e ${CIAN}Presiona Enter para continuar...${NC})"
            return 1
        }
    fi
    if [[ ! -w "$HISTORIAL" ]]; then
        echo -e "${ROJO}‚ùå No se puede escribir en $HISTORIAL. Revisa permisos.${NC}"
        echo "$(date '+%Y-%m-%d %H:%M:%S'):No se puede escribir en $HISTORIAL" >> "$HISTORIAL" 2>/dev/null
        read -p "$(echo -e ${CIAN}Presiona Enter para continuar...${NC})"
        return 1
    fi

    # Verificar sistema de archivos
    if mount | grep /root | grep -q ro; then
        echo -e "${ROJO}‚ùå El directorio /root est√° montado como solo lectura. Remonta con 'mount -o remount,rw /root'.${NC}"
        echo "$(date '+%Y-%m-%d %H:%M:%S'):Directorio /root en solo lectura" >> "$HISTORIAL" 2>/dev/null
        read -p "$(echo -e ${CIAN}Presiona Enter para continuar...${NC})"
        return 1
    fi

    # Verificar espacio en disco
    if ! df -h /root | grep -q '[0-9]'; then
        echo -e "${ROJO}‚ùå No hay espacio en disco en /root. Libera espacio e intenta de nuevo.${NC}"
        echo "$(date '+%Y-%m-%d %H:%M:%S'):No hay espacio en disco en /root" >> "$HISTORIAL" 2>/dev/null
        read -p "$(echo -e ${CIAN}Presiona Enter para continuar...${NC})"
        return 1
    fi

    # Leer nombre del usuario
    while true; do
        read -p "$(echo -e ${AZUL}üë§ Nombre del usuario: ${NC})" USUARIO
        [[ -z "$USUARIO" ]] && echo -e "${ROJO}‚ùå Ingresa un nombre v√°lido.${NC}" && continue
        if id "$USUARIO" &>/dev/null; then
            echo -e "${ROJO}‚ö†Ô∏è El usuario '$USUARIO' ya existe en el sistema.${NC}"
            continue
        fi
        if grep -qw "^$USUARIO:" "$REGISTROS"; then
            echo -e "${ROJO}‚ö†Ô∏è Ya existe un registro con ese nombre en $REGISTROS.${NC}"
            continue
        fi
        break
    done

    # Leer contrase√±a
    read -p "$(echo -e ${AZUL}üîë Contrase√±a: ${NC})" CLAVE
    [[ -z "$CLAVE" ]] && echo -e "${ROJO}‚ùå La contrase√±a no puede estar vac√≠a.${NC}" && read -p "$(echo -e ${CIAN}Presiona Enter para continuar...${NC})" && return 1

    # Leer d√≠as de validez
    while true; do
        read -p "$(echo -e ${AZUL}üìÖ D√≠as de validez: ${NC})" DIAS
        [[ "$DIAS" =~ ^[0-9]+$ && "$DIAS" -ge 0 ]] && break
        echo -e "${ROJO}‚ùå Ingresa un n√∫mero v√°lido (0 o m√°s).${NC}"
    done

    # Leer n√∫mero de m√≥viles
    while true; do
        read -p "$(echo -e ${AZUL}üì± ¬øCu√°ntos m√≥viles? ${NC})" MOVILES
        [[ "$MOVILES" =~ ^[1-9][0-9]{0,2}$ && "$MOVILES" -le 999 ]] && break
        echo -e "${ROJO}‚ùå Ingresa un n√∫mero entre 1 y 999.${NC}"
    done

    # Calcular fechas
    FECHA_CREACION=$(date +"%Y-%m-%d %H:%M:%S")
    EXPIRA_FECHA=$(date -d "+$DIAS days" +"%Y-%m-%d")
    FECHA_FORMAT=$(date -d "+$DIAS days" +"%d/%B/%Y" | awk '{print $1 "/" tolower($2) "/" $3}')

    # Agregar al REGISTROS
    echo "${USUARIO}:${CLAVE}:${FECHA_FORMAT}:${DIAS} d√≠as:${MOVILES}:${FECHA_CREACION}" >> "$REGISTROS"
    sync

    # Verificar escritura
    if ! grep -q "^$USUARIO:" "$REGISTROS"; then
        echo "$(date '+%Y-%m-%d %H:%M:%S'):Error: Registro de '$USUARIO' no se encontr√≥ en $REGISTROS tras escritura." >> "$HISTORIAL"
        echo "$(date '+%Y-%m-%d %H:%M:%S'):Contenido de $REGISTROS tras intento de escritura:" >> "$HISTORIAL"
        cat "$REGISTROS" >> "$HISTORIAL" 2>/dev/null
        echo -e "${ROJO}‚ùå Error: Fall√≥ la escritura del registro en $REGISTROS. Intenta de nuevo.${NC}"
        read -p "$(echo -e ${CIAN}Presiona Enter para continuar...${NC})"
        return 1
    fi

    # Crear usuario
    if ! useradd -M -s /bin/false "$USUARIO"; then
        sed -i "/^$USUARIO:/d" "$REGISTROS"
        sync
        echo "$(date '+%Y-%m-%d %H:%M:%S'):Error creando usuario '$USUARIO' en el sistema. Registro eliminado." >> "$HISTORIAL"
        echo -e "${ROJO}‚ùå Error creando el usuario en el sistema.${NC}"
        read -p "$(echo -e ${CIAN}Presiona Enter para continuar...${NC})"
        return 1
    fi

    # Establecer contrase√±a
    if ! echo "$USUARIO:$CLAVE" | chpasswd; then
        userdel -r "$USUARIO" 2>/dev/null
        sed -i "/^$USUARIO:/d" "$REGISTROS"
        sync
        echo "$(date '+%Y-%m-%d %H:%M:%S'):Error estableciendo contrase√±a para '$USUARIO'. Registro y usuario eliminados." >> "$HISTORIAL"
        echo -e "${ROJO}‚ùå Fall√≥ el cambio de contrase√±a. Registro revertido.${NC}"
        read -p "$(echo -e ${CIAN}Presiona Enter para continuar...${NC})"
        return 1
    fi

    # Configurar expiraci√≥n
    if ! usermod -e "$EXPIRA_FECHA" "$USUARIO"; then
        userdel -r "$USUARIO" 2>/dev/null
        sed -i "/^$USUARIO:/d" "$REGISTROS"
        sync
        echo "$(date '+%Y-%m-%d %H:%M:%S'):Error configurando expiraci√≥n para '$USUARIO'. Registro y usuario eliminados." >> "$HISTORIAL"
        echo -e "${ROJO}‚ùå Error configurando expiraci√≥n. Registro eliminado.${NC}"
        read -p "$(echo -e ${CIAN}Presiona Enter para continuar...${NC})"
        return 1
    fi

    # Registrar acci√≥n en HISTORIAL
    echo "$(date '+%Y-%m-%d %H:%M:%S'):Usuario creado:$USUARIO" >> "$HISTORIAL"

    # Mostrar resultado final
    echo -e "${VERDE}‚úÖ  Usuario creado correctamente:${NC}"
    echo -e "${AZUL}üë§ Usuario:${AMARILLO} $USUARIO${NC}"
    echo -e "${AZUL}üîë Clave:   ${AMARILLO}$CLAVE${NC}"
    echo -e "${AZUL}üìÖ Expira:  ${AMARILLO}${FECHA_FORMAT}//${NC}"
    echo -e "${AZUL}üì± L√≠mite m√≥viles: ${AMARILLO}$MOVILES${NC}"
    echo -e "${AZUL}üìÖ Creado:  ${AMARILLO}$FECHA_CREACION${NC}"
    echo -e "${VIOLETA}===== üìù RESUMEN DE REGISTRO =====${NC}"
    echo -e "${AMARILLO}üë§ Usuario    üìÖ Expira          ‚è≥  D√≠as       üì± M√≥viles   üìÖ Creado${NC}"
    echo -e "${CIAN}---------------------------------------------------------------${NC}"
    printf "${VERDE}%-12s %-20s %-13s %-12s %-20s${NC}\n" "$USUARIO:$CLAVE" "${FECHA_FORMAT}//" "$DIAS d√≠as" "$MOVILES" "$FECHA_CREACION"
    echo -e "${CIAN}===============================================================${NC}"
    read -p "$(echo -e ${CIAN}Presiona Enter para continuar...${NC})"
}

function ver_registros() {
    clear
    echo -e "${VIOLETA}===== üå∏ REGISTROS =====${NC}"
    echo -e "${AMARILLO}N¬∫  üë§ Usuario  üîí Clave   üìÖ Expira    ‚è≥ D√≠as   üì≤ M√≥viles${NC}"
    echo -e "${CIAN}-----------------------------------------------------------------------${NC}"

    if [[ ! -f "$REGISTROS" || ! -s "$REGISTROS" ]]; then
        echo -e "${ROJO}‚ùå No hay registros disponibles.${NC}"
        read -p "$(echo -e ${CIAN}Presiona Enter para continuar... ‚ú®${NC})"
        return 1
    fi

    contador=1
    while IFS=':' read -r usuario clave expira dias moviles creado; do
        echo -e "${AZUL}${contador}   ${AMARILLO}${usuario}        ${AMARILLO}${clave}        ${AMARILLO}${expira}//      ${AMARILLO}${dias}     ${AMARILLO}${moviles}${NC}"
        ((contador++))
    done < "$REGISTROS"

    echo -e "${CIAN}=====================${NC}"
    read -p "$(echo -e ${CIAN}Presiona Enter para continuar... ‚ú®${NC})"
}

# Colores y emojis
VIOLETA='\033[38;5;141m'
VERDE='\033[38;5;42m'
AMARILLO='\033[38;5;220m'
AZUL='\033[38;5;39m'
ROJO='\033[1;31m'
CIAN='\033[38;5;51m'
FUCHSIA='\033[38;2;255;0;255m'
AMARILLO_SUAVE='\033[38;2;255;204;0m'
ROSA='\033[38;2;255;105;180m'
ROSA_CLARO='\033[1;95m'
NC='\033[0m'

# Men√∫ principal
if [[ -t 0 ]]; then
    while true; do
        clear
        barra_sistema
        echo
        echo -e "${VIOLETA}====== üòá PANEL DE USUARIOS VPN/SSH ======${NC}"
        echo -e "${AMARILLO_SUAVE}1. üÜï Crear usuario${NC}"
        echo -e "${AMARILLO_SUAVE}2. üìã Ver registros${NC}"
        echo -e "${AMARILLO_SUAVE}3. üóëÔ∏è Eliminar usuario${NC}"
        echo -e "${AMARILLO_SUAVE}4. üìä Informaci√≥n${NC}"
        echo -e "${AMARILLO_SUAVE}5. üü¢ Verificar usuarios online${NC}"
        echo -e "${AMARILLO_SUAVE}6. üîí Bloquear/Desbloquear usuario${NC}"
        echo -e "${AMARILLO_SUAVE}7. üÜï Crear m√∫ltiples usuarios${NC}"
        echo -e "${AMARILLO_SUAVE}8. üìã Mini registro${NC}"
        echo -e "${AMARILLO_SUAVE}9. üí£ Eliminar completamente usuario(s) (modo nuclear)${NC}"
        echo -e "${AMARILLO_SUAVE}10. üé® Configurar banner SSH${NC}"
        echo -e "${AMARILLO_SUAVE}0. üö™ Salir${NC}"
        PROMPT=$(echo -e "${ROSA}‚û°Ô∏è Selecciona una opci√≥n: ${NC}")
        read -p "$PROMPT" OPCION
        case $OPCION in
            1) crear_registro ;;
            2) ver_registros ;;
            3) eliminar_usuario ;;
            4) informacion_usuarios ;;
            5) verificar_online ;;
            6) bloquear_desbloquear_usuario ;;
            7) crear_multiples_usuarios ;;
            8) mini_registro ;;
            9) nuclear_eliminar ;;
            10) configurar_banner_ssh ;;
            0) exit 0 ;;
            *) echo -e "${ROJO}‚ùå ¬°Opci√≥n inv√°lida!${NC}"; read -p "$(echo -e ${ROSA_CLARO}Presiona Enter para continuar...${NC})" ;;
        esac
    done
fi
