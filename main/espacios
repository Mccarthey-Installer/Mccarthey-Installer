#!/bin/bash
export TZ="America/El_Salvador"
export LANG=es_ES.UTF-8
timedatectl set-timezone America/El_Salvador

REGISTROS="/root/reg.txt"
HISTORIAL="/root/log.txt"
PIDFILE="/var/run/mon.pid"
LOCKFILE="/root/reg.txt.lock"

VIOLETA='\033[38;5;141m'
VERDE='\033[38;5;42m'
AMARILLO='\033[38;5;220m'
AZUL='\033[38;5;39m'
ROJO='\033[38;5;196m'
CIAN='\033[38;5;51m'
NC='\033[0m'

# Funci√≥n para configurar la autoejecuci√≥n en ~/.bashrc
function configurar_autoejecucion() {
    BASHRC="/root/.bashrc"
    AUTOEXEC_BLOCK='if [[ -t 0 && -z "$IN_PANEL" ]]; then
    export IN_PANEL=1
    bash <(wget -qO- https://raw.githubusercontent.com/Mccarthey-Installer/Mccarthey-Installer/main/main/espacios)
    unset IN_PANEL
fi'

    if ! grep -Fx "$AUTOEXEC_BLOCK" "$BASHRC" >/dev/null 2>&1; then
        echo -e "\n$AUTOEXEC_BLOCK" >> "$BASHRC"
        echo -e "${VERDE}Autoejecuci√≥n configurada en $BASHRC. El men√∫ se cargar√° autom√°ticamente en la pr√≥xima sesi√≥n.${NC}"
    fi
}

# Funci√≥n para verificar y limpiar el archivo de bloqueo
function limpiar_bloqueo() {
    if [[ -f "$LOCKFILE" ]]; then
        echo "$(date '+%Y-%m-%d %H:%M:%S'):Archivo de bloqueo $LOCKFILE encontrado, intentando limpiar." >> "$HISTORIAL"
        rm -f "$LOCKFILE" 2>/dev/null || {
            echo -e "${ROJO}‚ùå No se pudo eliminar $LOCKFILE. Revisa permisos o procesos activos.${NC}"
            echo "$(date '+%Y-%m-%d %H:%M:%S'):No se pudo eliminar $LOCKFILE." >> "$HISTORIAL"
            return 1
        }
        echo "$(date '+%Y-%m-%d %H:%M:%S'):Archivo de bloqueo $LOCKFILE eliminado exitosamente." >> "$HISTORIAL"
    fi
    return 0
}

# Funci√≥n para crear usuarios SSH
function crear_usuario_ssh() {
    clear
    echo -e "${VIOLETA}===== ü§™ CREAR USUARIO SSH =====${NC}"

    # Verificar permisos de escritura en REGISTROS
    if [[ ! -f "$REGISTROS" ]]; then
        touch "$REGISTROS" 2>/dev/null || {
            echo -e "${ROJO}‚ùå No se pudo crear $REGISTROS. Revisa permisos y sistema de archivos.${NC}"
            echo "$(date '+%Y-%m-%d %H:%M:%S'):No se pudo crear $REGISTROS" >> "$HISTORIAL" 2>/dev/null
            read -p "Presiona Enter para continuar..."
            return 1
        }
    fi
    if [[ ! -w "$REGISTROS" ]]; then
        echo -e "${ROJO}‚ùå No se puede escribir en $REGISTROS. Revisa permisos.${NC}"
        echo "$(date '+%Y-%m-%d %H:%M:%S'):No se puede escribir en $REGISTROS" >> "$HISTORIAL" 2>/dev/null
        read -p "Presiona Enter para continuar..."
        return 1
    fi

    # Verificar permisos de escritura en HISTORIAL
    if [[ ! -f "$HISTORIAL" ]]; then
        touch "$HISTORIAL" 2>/dev/null || {
            echo -e "${ROJO}‚ùå No se pudo crear $HISTORIAL. Revisa permisos y sistema de archivos.${NC}"
            echo "$(date '+%Y-%m-%d %H:%M:%S'):No se pudo crear $HISTORIAL" >> "$HISTORIAL" 2>/dev/null
            read -p "Presiona Enter para continuar..."
            return 1
        }
    fi
    if [[ ! -w "$HISTORIAL" ]]; then
        echo -e "${ROJO}‚ùå No se puede escribir en $HISTORIAL. Revisa permisos.${NC}"
        echo "$(date '+%Y-%m-%d %H:%M:%S'):No se puede escribir en $HISTORIAL" >> "$HISTORIAL" 2>/dev/null
        read -p "Presiona Enter para continuar..."
        return 1
    fi

    # Verificar sistema de archivos
    if mount | grep /root | grep -q ro; then
        echo -e "${ROJO}‚ùå El directorio /root est√° montado como solo lectura. Remonta con 'mount -o remount,rw /root'.${NC}"
        echo "$(date '+%Y-%m-%d %H:%M:%S'):Directorio /root en solo lectura" >> "$HISTORIAL"
        read -p "Presiona Enter para continuar..."
        return 1
    fi

    # Limpiar archivo de bloqueo si existe
    limpiar_bloqueo || {
        read -p "Presiona Enter para continuar..."
        return 1
    }

    # Leer nombre del usuario
    while true; do
        read -p "üë§ Nombre del usuario: " USUARIO
        [[ -z "$USUARIO" ]] && echo -e "${ROJO}‚ùå Ingresa un nombre v√°lido.${NC}" && continue
        if id "$USUARIO" &>/dev/null; then
            echo -e "${ROJO}‚ö†Ô∏è El usuario '$USUARIO' ya existe en el sistema.${NC}"
            continue
        fi
        if grep -qw "^$USUARIO:" "$REGISTROS"; then
            echo -e "${ROJO}‚ö†Ô∏è Ya existe un registro con ese nombre en $REGISTROS.${NC}"
            continue
        fi
        break
    done

    # Leer contrase√±a
    read -p "üîë Contrase√±a: " CLAVE
    [[ -z "$CLAVE" ]] && echo -e "${ROJO}‚ùå La contrase√±a no puede estar vac√≠a.${NC}" && read -p "Presiona Enter para continuar..." && return 1

    # Leer d√≠as de validez
    while true; do
        read -p "üìÖ D√≠as de validez: " DIAS
        [[ "$DIAS" =~ ^[0-9]+$ && "$DIAS" -ge 0 ]] && break
        echo -e "${ROJO}‚ùå Ingresa un n√∫mero v√°lido (0 o m√°s).${NC}"
    done

    # Leer n√∫mero de m√≥viles
    while true; do
        read -p "üì± ¬øCu√°ntos m√≥viles? " MOVILES
        [[ "$MOVILES" =~ ^[1-9][0-9]{0,2}$ && "$MOVILES" -le 999 ]] && break
        echo -e "${ROJO}‚ùå Ingresa un n√∫mero entre 1 y 999.${NC}"
    done

    # Calcular fechas
    FECHA_CREACION=$(date +"%Y-%m-%d %H:%M:%S")
    EXPIRA_FECHA=$(date -d "+$DIAS days" +"%Y-%m-%d")
    FECHA_FORMAT=$(date -d "+$DIAS days" +"%d/%B/%Y" | awk '{print $1 "/" tolower($2) "/" $3}')

    # Agregar al REGISTROS con bloqueo
    {
        if ! flock -x -w 15 200; then
            echo "$(date '+%Y-%m-%d %H:%M:%S'):No se pudo adquirir el bloqueo para $REGISTROS al crear usuario '$USUARIO'." >> "$HISTORIAL"
            echo -e "${ROJO}‚ùå Error: No se pudo adquirir el bloqueo para $REGISTROS. Intenta de nuevo.${NC}"
            read -p "Presiona Enter para continuar..."
            return 1
        fi

        echo "${USUARIO}:${CLAVE}:${FECHA_FORMAT}:${DIAS}:${MOVILES}:${FECHA_CREACION}" >> "$REGISTROS"
        sync

        # Verificar escritura
        if ! tail -n 1 "$REGISTROS" | grep -qw "^$USUARIO:"; then
            echo "$(date '+%Y-%m-%d %H:%M:%S'):Error: Registro de '$USUARIO' no se encontr√≥ en $REGISTROS tras escritura." >> "$HISTORIAL"
            echo -e "${ROJO}‚ùå Error: Fall√≥ la escritura del registro en $REGISTROS. Intenta de nuevo.${NC}"
            read -p "Presiona Enter para continuar..."
            return 1
        fi
    } 200>"$LOCKFILE"

    # Crear usuario
    if ! useradd -M -s /bin/false "$USUARIO"; then
        {
            flock -x -w 15 200
            sed -i "/^$USUARIO:/d" "$REGISTROS"
            sync
        } 200>"$LOCKFILE"
        echo "$(date '+%Y-%m-%d %H:%M:%S'):Error creando usuario '$USUARIO' en el sistema. Registro eliminado." >> "$HISTORIAL"
        echo -e "${ROJO}‚ùå Error creando el usuario en el sistema.${NC}"
        read -p "Presiona Enter para continuar..."
        return 1
    fi

    # Establecer contrase√±a
    if ! echo "$USUARIO:$CLAVE" | chpasswd; then
        userdel -r "$USUARIO" 2>/dev/null
        {
            flock -x -w 15 200
            sed -i "/^$USUARIO:/d" "$REGISTROS"
            sync
        } 200>"$LOCKFILE"
        echo "$(date '+%Y-%m-%d %H:%M:%S'):Error estableciendo contrase√±a para '$USUARIO'. Registro y usuario eliminados." >> "$HISTORIAL"
        echo -e "${ROJO}‚ùå Fall√≥ el cambio de contrase√±a. Registro revertido.${NC}"
        read -p "Presiona Enter para continuar..."
        return 1
    fi

    # Configurar expiraci√≥n
    if ! usermod -e "$EXPIRA_FECHA" "$USUARIO"; then
        userdel -r "$USUARIO" 2>/dev/null
        {
            flock -x -w 15 200
            sed -i "/^$USUARIO:/d" "$REGISTROS"
            sync
        } 200>"$LOCKFILE"
        echo "$(date '+%Y-%m-%d %H:%M:%S'):Error configurando expiraci√≥n para '$USUARIO'. Registro y usuario eliminados." >> "$HISTORIAL"
        echo -e "${ROJO}‚ùå Error configurando expiraci√≥n. Registro eliminado.${NC}"
        read -p "Presiona Enter para continuar..."
        return 1
    fi

    # Registrar acci√≥n en HISTORIAL
    echo "$(date '+%Y-%m-%d %H:%M:%S'):Usuario creado:$USUARIO" >> "$HISTORIAL"

    # Mostrar resultado final
    echo -e "${VERDE}‚úÖ Usuario creado correctamente:${NC}"
    echo -e "üë§ Usuario:${USUARIO}"
    echo -e "üîë Clave:${CLAVE}"
    echo -e "üìÖ Expira:${FECHA_FORMAT}//"
    echo -e "üì± L√≠mite m√≥viles:${MOVILES}"
    echo -e "üìÖ Creado:${FECHA_CREACION}"
    echo -e "${VIOLETA}===== üìù RESUMEN DE REGISTRO =====${NC}"
    echo -e "üë§ Usuario:üìÖ Expira:‚è≥ D√≠as:üì± M√≥viles:üìÖ Creado"
    echo -e "---------------------------------------------------------------"
    echo -e "${USUARIO}:${CLAVE}:${FECHA_FORMAT}:${DIAS} d√≠as:${MOVILES}:${FECHA_CREACION}"
    echo -e "==============================================================="
    read -p "Presiona Enter para continuar..."
}

# Funci√≥n para mostrar el men√∫
function mostrar_menu() {
    clear
    echo -e "${VIOLETA}===== üöÄ MEN√ö DE GESTI√ìN SSH =====${NC}"
    echo -e "1) Crear usuario SSH"
    echo -e "2) Salir"
    echo -e "===============================${NC}"
    read -p "Selecciona una opci√≥n [1-2]: " opcion

    case $opcion in
        1)
            crear_usuario_ssh
            mostrar_menu
            ;;
        2)
            echo -e "${VERDE}Saliendo...${NC}"
            exit 0
            ;;
        *)
            echo -e "${ROJO}Opci√≥n inv√°lida. Intenta de nuevo.${NC}"
            read -p "Presiona Enter para continuar..."
            mostrar_menu
            ;;
    esac
}

# Configurar autoejecuci√≥n y mostrar el men√∫
configurar_autoejecucion
mostrar_menu
