#!/bin/bash

# ================================
#      McCarthey Installer v1.5
# ================================

# ARGUMENTOS
ENABLE_PANEL=false
for arg in "$@"; do
    if [[ "$arg" == "--mccpanel" ]]; then
        ENABLE_PANEL=true
    fi
done

# OBTENER MCC-KEY
KEY="$1"
if [[ "$KEY" == "--mccpanel" ]]; then
    KEY=""
fi

if [ -z "$KEY" ]; then
    clear
    echo -e "\e[1;34m"
    echo "============================================="
    echo "          MCC-KEY NO PROPORCIONADA          "
    echo "============================================="
    echo -e "\e[0m"

    echo -e "\e[1;36m"
    echo "==========================================="
    echo "           INGRESA TU MCC-KEY              "
    echo "==========================================="
    echo -e "\e[0m"

    read -p "> " KEY
fi

ENCODED_KEY=$(echo "$KEY" | sed 's/{/%7B/' | sed 's/}/%7D/')
VALIDATOR_URL="http://172.235.128.99:9393/validate/$ENCODED_KEY"

echo -e "\n\033[1;34m[ INFO ]\033[0m Verificando KEY con el servidor..."
RESPONSE=$(curl -s "$VALIDATOR_URL")
VALIDO=$(echo "$RESPONSE" | grep -o '"valida":true')

if [ -z "$VALIDO" ]; then
    MOTIVO=$(echo "$RESPONSE" | grep -oP '"motivo":"\K[^"]+')
    echo -e "\n\033[1;31m[ ERROR ]\033[0m Key inválida: $MOTIVO"
    exit 1
fi

USERNAME=$(echo "$RESPONSE" | grep -oP '"username":"\K[^"]+')
echo -e "\n\033[1;32m[ OK ]\033[0m Key válida. Continuando con la instalación..."
echo -e "\033[1;34mKey: Verified【  $USERNAME  】\033[0m"

# ACTUALIZACIÓN DEL SISTEMA
echo -e "\n\033[1;33m==============================================\033[0m"
echo -e "\033[1;33m      ACTUALIZANDO SISTEMA Y PAQUETES         \033[0m"
echo -e "\033[1;33m==============================================\033[0m"

apt update -y && apt upgrade -y
if command -v needrestart >/dev/null; then
    needrestart -r a
fi

apt install -y curl unzip wget

# INSTALACIÓN DE PAQUETES
PAQUETES=(
  bsdmainutils screen nginx nload htop python3 python3-pip
  nodejs npm lsof psmisc socat bc net-tools cowsay
  nmap jq iptables openssh-server dropbear
)

echo -e "\n\033[1;33m==============================================\033[0m"
echo -e "\033[1;33m          INSTALANDO PAQUETES NECESARIOS       \033[0m"
echo -e "\033[1;33m==============================================\033[0m"

for paquete in "${PAQUETES[@]}"; do
    apt install -y "$paquete" &>/dev/null
    if dpkg -s "$paquete" &>/dev/null; then
        echo -e "\033[1;32m[ OK ]\033[0m Instalación correcta: ${paquete^^}"
    else
        echo -e "\033[1;31m[ FAIL ]\033[0m Error al instalar: ${paquete^^}"
    fi
done

# CONFIGURAR NGINX EN PUERTO 81
echo -e "\n\033[1;33m==============================================\033[0m"
echo -e "\033[1;33m          CONFIGURANDO NGINX (PUERTO 81)       \033[0m"
echo -e "\033[1;33m==============================================\033[0m"

# Asegurarse de que nginx no esté ocupando el puerto 80
systemctl stop nginx &>/dev/null

# Modificar la configuración de nginx para usar el puerto 81
NGINX_CONF="/etc/nginx/sites-available/default"
if [ -f "$NGINX_CONF" ]; then
    sed -i 's/listen 80 default_server/listen 81 default_server/' "$NGINX_CONF"
    sed -i 's/listen \[::\]:80 default_server/listen \[::\]:81 default_server/' "$NGINX_CONF"
    echo -e "\033[1;32m[ OK ]\033[0m Configuración de nginx actualizada para el puerto 81."
else
    echo -e "\033[1;31m[ FAIL ]\033[0m No se encontró el archivo de configuración $NGINX_CONF."
    exit 1
fi

# Reiniciar nginx
systemctl enable nginx &>/dev/null
systemctl restart nginx &>/dev/null

if ss -tuln | grep -q ":81 "; then
    echo -e "\033[1;32m[ OK ]\033[0m Nginx está activo en el puerto 81."
else
    echo -e "\033[1;31m[ FAIL ]\033[0m No se pudo iniciar nginx en el puerto 81."
    journalctl -u nginx -n 10 --no-pager
    exit 1
fi

# Asegurarse de que el puerto 80 esté libre
if ss -tuln | grep -q ":80 "; then
    echo -e "\033[1;31m[ WARNING ]\033[0m El puerto 80 sigue en uso. Verificando..."
    lsof -i :80
    echo -e "\033[1;33m[ SUGERENCIA ] Detén manualmente el proceso que usa el puerto 80 y vuelve a ejecutar el script.\033[0m"
    exit 1
fi

# CONFIGURAR OPENSSH EN PUERTO 22
echo -e "\n\033[1;33m==============================================\033[0m"
echo -e "\033[1;33m          CONFIGURANDO OPENSSH (PUERTO 22)     \033[0m"
echo -e "\033[1;33m==============================================\033[0m"

systemctl enable ssh &>/dev/null
systemctl start ssh &>/dev/null

if ss -tuln | grep -q ":22 "; then
    echo -e "\033[1;32m[ OK ]\033[0m OpenSSH está activo en el puerto 22."
else
    sed -i 's/^#Port 22/Port 22/' /etc/ssh/sshd_config
    systemctl restart ssh &>/dev/null
    if ss -tuln | grep -q ":22 "; then
        echo -e "\033[1;32m[ OK ]\033[0m OpenSSH configurado y activo en el puerto 22."
    else
        echo -e "\033[1;31m[ FAIL ]\033[0m No se pudo activar OpenSSH en el puerto 22."
    fi
fi

ufw allow 22 &>/dev/null
ufw enable &>/dev/null
echo -e "\033[1;32m[ OK ]\033[0m Puerto 22 permitido en ufw."

# INSTALACIÓN Y CONFIGURACIÓN AUTOMÁTICA DE DROPBEAR Y PROXY.PY
echo -e "\n\033[1;33m==============================================\033[0m"
echo -e "\033[1;33m      CONFIGURANDO DROPBEAR Y PROXY.PY        \033[0m"
echo -e "\033[1;33m==============================================\033[0m"

if ! dpkg -s dropbear &>/dev/null; then
    echo -e "\n[+] Instalando Dropbear..."
    apt install dropbear -y > /dev/null 2>&1
    if dpkg -s dropbear &>/dev/null; then
        echo -e "\033[1;32m[ OK ]\033[0m Dropbear instalado correctamente."
    else
        echo -e "\033[1;31m[ FAIL ]\033[0m Error al instalar Dropbear."
        exit 1
    fi
fi

echo -e "\n[+] Configurando Dropbear en puerto 444..."
echo "/bin/false" >> /etc/shells
echo "/usr/sbin/nologin" >> /etc/shells
sed -i 's/^NO_START=1/NO_START=0/' /etc/default/dropbear
sed -i 's/^DROPBEAR_PORT=.*/DROPBEAR_PORT=444/' /etc/default/dropbear
echo 'DROPBEAR_EXTRA_ARGS="-p 444"' >> /etc/default/dropbear

systemctl restart dropbear &>/dev/null || service dropbear restart &>/dev/null

if pgrep dropbear > /dev/null && ss -tuln | grep -q ":444 "; then
    echo -e "\033[1;32m[ OK ] Dropbear activado en puerto 444.\033[0m"
else
    echo -e "\033[1;31m[ FAIL ] Error: No se pudo iniciar Dropbear en el puerto 444.\033[0m"
    journalctl -u dropbear -n 10 --no-pager
    exit 1
fi

echo -e "\n[+] Configurando Proxy WS/Directo..."
mkdir -p /etc/mccproxy

wget -q https://raw.githubusercontent.com/Mccarthey-Installer/Mccarthey-Installer/main/extras/proxy.py -O /etc/mccproxy/proxy.py
if [ -f /etc/mccproxy/proxy.py ] && [ -s /etc/mccproxy/proxy.py ]; then
    echo -e "\033[1;32m[ OK ] Script proxy.py descargado correctamente.\033[0m"
else
    echo -e "\033[1;31m[ FAIL ] Error al descargar proxy.py o el archivo está vacío.\033[0m"
    echo -e "\033[1;33m[ SUGERENCIA ] Verifica que el archivo exista en https://raw.githubusercontent.com/Mccarthey-Installer/Mccarthey-Installer/main/extras/proxy.py\033[0m"
    exit 1
fi

echo -e "\n[+] Instalando dependencias de proxy.py..."
pip3 install websockets > /dev/null 2>&1
if pip3 show websockets > /dev/null 2>&1; then
    echo -e "\033[1;32m[ OK ] Dependencias instaladas correctamente.\033[0m"
else
    echo -e "\033[1;31m[ FAIL ] Error al instalar dependencias (websockets).\033[0m"
    exit 1
fi

if ! dpkg -s screen &>/dev/null; then
    apt install screen -y > /dev/null 2>&1
    if dpkg -s screen &>/dev/null; then
        echo -e "\033[1;32m[ OK ] Screen instalado correctamente.\033[0m"
    else
        echo -e "\033[1;31m[ FAIL ] Error al instalar screen.\033[0m"
        exit 1
    fi
fi

PROXY_PORT=80
TARGET_PORT=444
RESPONSE=101

echo -e "\n[+] Iniciando Proxy en puerto $PROXY_PORT -> $TARGET_PORT (WS $RESPONSE)"
screen -dmS proxy python3 /etc/mccproxy/proxy.py "$PROXY_PORT" "$TARGET_PORT" "$RESPONSE"

sleep 2

if screen -list | grep -q "proxy" && ss -tuln | grep -q ":$PROXY_PORT "; then
    echo -e "\033[1;32m[ OK ] Proxy WS/Directo activo en puerto $PROXY_PORT\033[0m"
else
    echo -e "\033[1;31m[ FAIL ] Error: No se pudo iniciar el Proxy.\033[0m"
    echo -e "\033[1;33m[ DEBUG ] Verificando sesiones de screen...\033[0m"
    screen -list
    echo -e "\033[1;33m[ DEBUG ] Verificando puerto $PROXY_PORT...\033[0m"
    ss -tuln | grep :$PROXY_PORT
    echo -e "\033[1;33m[ SUGERENCIA ] Intenta ejecutar manualmente: python3 /etc/mccproxy/proxy.py $PROXY_PORT $TARGET_PORT $RESPONSE\033[0m"
    exit 1
fi

# PANEL
if $ENABLE_PANEL; then
    echo -e "\n\033[1;36m[ INFO ]\033[0m Instalando el panel McCarthey..."
    rm -f /root/menu.sh /usr/bin/menu  # Eliminar archivos antiguos
    cat << 'EOF' > /root/menu.sh
#!/bin/bash

validar_key() {
    echo -e "\n\033[1;36m[ INFO ]\033[0m Descargando la última versión del instalador..."
    rm -f setup
    wget -q -O setup "https://raw.githubusercontent.com/Mccarthey-Installer/Mccarthey-Installer/main/setup?$(date +%s)"
    if [ -f setup ] && [ -s setup ]; then
        echo -e "\033[1;32m[ OK ]\033[0m Script setup descargado correctamente."
        echo -e "\033[1;36m[ DEBUG ]\033[0m Verificando contenido del script descargado:"
        grep "PANEL OFICIAL MCCARTHEY" setup || echo "No se encontró la línea esperada."
    else
        echo -e "\033[1;31m[ FAIL ]\033[0m Error al descargar el script setup."
        exit 1
    fi
    chmod +x setup
    echo -e "\n\033[1;36m[ INFO ]\033[0m Ejecutando el nuevo setup..."
    ./setup --mccpanel
    if [ $? -eq 0 ]; then
        echo -e "\033[1;32m[ OK ]\033[0m Nuevo setup ejecutado correctamente."
    else
        echo -e "\033[1;31m[ FAIL ]\033[0m Error al ejecutar el nuevo setup. Código de salida: $?"
        exit 1
    fi
    echo -e "\n\033[1;36m[ INFO ]\033[0m Verificando si menu.sh se actualizó..."
    if [ -f /root/menu.sh ]; then
        echo -e "\033[1;36m[ DEBUG ]\033[0m Contenido de /root/menu.sh después de la actualización:"
        grep "PANEL OFICIAL MCCARTHEY" /root/menu.sh || echo "No se encontró la línea esperada."
    else
        echo -e "\033[1;31m[ FAIL ]\033[0m El archivo /root/menu.sh no existe."
        exit 1
    fi
    echo -e "\n\033[1;32m[ OK ]\033[0m Actualización completada. Reiniciando el panel..."
    exec /usr/bin/menu
}

fecha=$(TZ=America/El_Salvador date +"%a %d/%m/%Y - %I:%M:%S %p %Z")
ip=$(hostname -I | awk '{print $1}')
cpu_model=$(awk -F: '/model name/ {print $2; exit}' /proc/cpuinfo)
cpus=$(nproc)
so=$(lsb_release -d | cut -f2)

read total used free shared buff_cache available <<< $(free -m | awk '/^Mem:/ {print $2, $3, $4, $5, $6, $7}')
cpu_uso=$(top -bn1 | grep "Cpu(s)" | awk '{print 100 - $8}')
cpu_uso_fmt=$(awk "BEGIN {printf \"%.1f%%\", $cpu_uso}")
ram_porc=$(awk "BEGIN {printf \"%.2f%%\", ($used/$total)*100}")

if [ "$total" -ge 1024 ]; then
    ram_total=$(awk "BEGIN {printf \"%.1fG\", $total/1024}")
    ram_libre=$(awk "BEGIN {printf \"%.1fG\", $available/1024}")
else
    ram_total="${total}M"
    ram_libre="${available}M"
fi

ram_usada=$(awk "BEGIN {printf \"%.0fM\", $used}")
ram_cache=$(awk "BEGIN {printf \"%.0fM\", $buff_cache}")

USUARIOS_FILE="/root/usuarios_registrados.txt"

while true; do
    clear
    echo -e "\e[1;36m---------------------------------------------------\e[0m"
    echo -e "          \e[1;33mPANEL OFICIAL MCCARTHEY\e[0m"
    echo -e "\e[1;36m---------------------------------------------------\e[0m"
    echo -e " \e[1;35mFECHA       :\e[0m $fecha"
    echo -e " \e[1;35mIP VPS      :\e[0m $ip"
    echo -e " \e[1;35mCPU's       :\e[0m $cpus"
    echo -e " \e[1;35mMODELO CPU  :\e[0m $cpu_model"
    echo -e " \e[1;35mS.O         :\e[0m $so"
    echo -e "\e[1;36m---------------------------------------------------\e[0m"
    echo -e " \e[1;32mTOTAL: $ram_total  LIBRE: $ram_libre  EN USO: $ram_usada\e[0m"
    echo -e " \e[1;32mU/RAM: $ram_porc   U/CPU: $cpu_uso_fmt  BUFFER: $ram_cache\e[0m"
    echo -e "\e[1;36m---------------------------------------------------\e[0m"
    echo -e " \e[1;33m[1] CREAR NUEVO USUARIO SSH\e[0m"
    echo -e " \e[1;33m[2] ACTUALIZAR MCC-KEY\e[0m"
    echo -e " \e[1;33m[3] USUARIOS REGISTRADOS\e[0m"
    echo -e " \e[1;33m[4] ELIMINAR USUARIOS\e[0m"
    echo -e " \e[1;33m[5] SALIR\e[0m"
    echo -e " \e[1;33m[6] COLOCAR PUERTOS\e[0m"
    echo -e "\e[1;36m---------------------------------------------------\e[0m"
    echo -e -n "\e[1;33mElige una opción: \e[0m"
    read opc

    case $opc in
        1)
            read -p "Nombre de usuario: " USUARIO
            if id "$USUARIO" >/dev/null 2>&1; then
                echo ""
                echo -e "\e[1;31mEl usuario $USUARIO ya existe en el sistema.\e[0m"
                echo ""
                read -p "Presiona enter para volver al panel principal..."
                continue
            fi
            if grep -q "^$USUARIO:" "$USUARIOS_FILE" 2>/dev/null; then
                echo ""
                echo -e "\e[1;31mEl usuario $USUARIO ya está registrado en el archivo.\e[0m"
                echo ""
                read -p "Presiona enter para volver al panel principal..."
                continue
            fi
            read -p "Contraseña: " PASSWORD
            read -p "Límite de conexiones: " LIMITE
            read -p "Días de validez: " DIAS

            if [[ -z "$USUARIO" || -z "$PASSWORD" || -z "$LIMITE" || -z "$DIAS" ]]; then
                echo ""
                echo -e "\e[1;31mPor favor complete todos los datos.\e[0m"
                echo ""
                read -p "Presiona enter para volver al panel principal..."
                continue
            fi

            if ! [[ "$LIMITE" =~ ^[0-9]+$ ]] || [ "$LIMITE" -lt 1 ]; then
                echo ""
                echo -e "\e[1;31mEl límite de conexiones debe ser un número positivo.\e[0m"
                echo ""
                read -p "Presiona enter para volver al panel principal..."
                continue
            fi

            if ! [[ "$DIAS" =~ ^[0-9]+$ ]] || [ "$DIAS" -lt 1 ]; then
                echo ""
                echo -e "\e[1;31mLos días de validez deben ser un número positivo.\e[0m"
                echo ""
                read -p "Presiona enter para volver al panel principal..."
                continue
            fi

            FECHA_EXPIRACION=$(date -d "$DIAS days" +"%d/ de %B")
            useradd -e $(date -d "$DIAS days" +%Y-%m-%d) -s /bin/false -M "$USUARIO"
            echo "$USUARIO:$PASSWORD" | chpasswd

            echo "$USUARIO:$PASSWORD:$LIMITE:$FECHA_EXPIRACION:$DIAS" >> "$USUARIOS_FILE"

            echo ""
            echo -e "\e[1;32mUsuario creado con éxito:\e[0m"
            echo ""
            echo -e "\e[1;35m$(printf '%-12s %-14s %-10s %-15s %-5s' 'USUARIO' 'CONTRASEÑA' 'LIMITE' 'CADUCA' 'DIAS')\e[0m"
            printf "%-12s %-14s %-10s %-15s %-5s\n" "$USUARIO" "$PASSWORD" "$LIMITE" "$FECHA_EXPIRACION" "$DIAS"
            echo ""
            read -p "Presiona enter para continuar..."
            ;;
        2)
            validar_key
            ;;
        3)
            clear
            echo -e "\e[1;36m---------------------------------------------------\e[0m"
            echo -e "          \e[1;33mUSUARIOS REGISTRADOS\e[0m"
            echo -e "\e[1;36m---------------------------------------------------\e[0m"
            if [[ -s "$USUARIOS_FILE" ]]; then
                echo -e "\e[1;35m$(printf '%-12s %-14s %-10s %-15s %-5s' 'USUARIO' 'CONTRASEÑA' 'LIMITE' 'CADUCA' 'DIAS')\e[0m"
                while IFS=: read -r usuario password limite caduca dias; do
                    if id "$usuario" >/dev/null 2>&1; then
                        printf "%-12s %-14s %-10s %-15s %-5s\n" "$usuario" "$password" "$limite" "$caduca" "$dias"
                    else
                        sed -i "/^$usuario:/d" "$USUARIOS_FILE"
                    fi
                done < "$USUARIOS_FILE"
                if [[ ! -s "$USUARIOS_FILE" ]]; then
                    echo -e "\e[1;31mLista vacía. No hay usuarios registrados.\e[0m"
                fi
            else
                echo -e "\e[1;31mLista vacía. No hay usuarios registrados.\e[0m"
            fi
            echo -e "\e[1;36m---------------------------------------------------\e[0m"
            read -p "Presiona enter para volver al panel principal..."
            ;;
        4)
            clear
            echo -e "\e[1;36m---------------------------------------------------\e[0m"
            echo -e "          \e[1;33mELIMINAR USUARIOS\e[0m"
            echo -e "\e[1;36m---------------------------------------------------\e[0m"
            if [[ -s "$USUARIOS_FILE" ]]; then
                echo -e "\e[1;35m$(printf '%-12s %-14s %-10s %-15s %-5s' 'USUARIO' 'CONTRASEÑA' 'LIMITE' 'CADUCA' 'DIAS')\e[0m"
                while IFS=: read -r usuario password limite caduca dias; do
                    if id "$usuario" >/dev/null 2>&1; then
                        printf "%-12s %-14s %-10s %-15s %-5s\n" "$usuario" "$password" "$limite" "$caduca" "$dias"
                    else
                        sed -i "/^$usuario:/d" "$USUARIOS_FILE"
                    fi
                done < "$USUARIOS_FILE"
                if [[ ! -s "$USUARIOS_FILE" ]]; then
                    echo -e "\e[1;31mLista vacía. No hay usuarios registrados.\e[0m"
                fi
            else
                echo -e "\e[1;31mLista vacía. No hay usuarios registrados.\e[0m"
            fi
            echo -e "\e[1;36m---------------------------------------------------\e[0m"
            echo -e "\e[1;33m[1] Eliminar un usuario específico\e[0m"
            echo -e "\e[1;33m[2] Eliminar todos los usuarios\e[0m"
            echo -e "\e[1;33m[3] Volver al panel principal\e[0m"
            echo -e "\e[1;36m---------------------------------------------------\e[0m"
            echo -e -n "\e[1;33mElige una opción: \e[0m"
            read del_opc

            case $del_opc in
                1)
                    read -p "Nombre del usuario a eliminar: " USUARIO_DEL
                    if [[ -z "$USUARIO_DEL" ]]; then
                        echo -e "\e[1;31mPor favor ingrese un nombre de usuario.\e[0m"
                        read -p "Presiona enter para continuar..."
                        continue
                    fi

                    if ! id "$USUARIO_DEL" >/dev/null 2>&1; then
                        echo -e "\e[1;31mEl usuario $USUARIO_DEL no existe.\e[0m"
                        sed -i "/^$USUARIO_DEL:/d" "$USUARIOS_FILE" 2>/dev/null
                        read -p "Presiona enter para continuar..."
                        continue
                    fi

                    echo -e "\e[1;33m¿Estás seguro de eliminar al usuario $USUARIO_DEL? (s/n)\e[0m"
                    read -p "Confirma: " confirm
                    if [[ "$confirm" == "s" || "$confirm" == "S" ]]; then
                        userdel -r "$USUARIO_DEL" 2>/dev/null
                        sed -i "/^$USUARIO_DEL:/d" "$USUARIOS_FILE"
                        echo -e "\e[1;32mUsuario $USUARIO_DEL eliminado con éxito.\e[0m"
                    else
                        echo -e "\e[1;31mEliminación cancelada.\e[0m"
                    fi
                    read -p "Presiona enter para continuar..."
                    ;;
                2)
                    echo -e "\e[1;33m¿Estás seguro de eliminar TODOS los usuarios? (s/n)\e[0m"
                    read -p "Confirma: " confirm
                    if [[ "$confirm" == "s" || "$confirm" == "S" ]]; then
                        if [[ -s "$USUARIOS_FILE" ]]; then
                            while IFS=: read -r usuario _; do
                                userdel -r "$usuario" 2>/dev/null
                            done < "$USUARIOS_FILE"
                            > "$USUARIOS_FILE"
                            echo -e "\e[1;32mTodos los usuarios han sido eliminados.\e[0m"
                        else
                            echo -e "\e[1;31mNo hay usuarios para eliminar.\e[0m"
                        fi
                    else
                        echo -e "\e[1;31mEliminación cancelada.\e[0m"
                    fi
                    read -p "Presiona enter para continuar..."
                    ;;
                3)
                    continue
                    ;;
                *)
                    echo -e "\e[1;31mOpción no válida.\e[0m"
                    read -p "Presiona enter para continuar..."
                    ;;
            esac
            ;;
        5)
            echo -e "\e[1;33mSaliendo del panel...\e[0m"
            exit 0
            ;;
        6)
            clear
            echo "--------------------------------------"
            echo "     CONFIGURACION DE PROXY + DROPBEAR"
            echo "--------------------------------------"
            echo "[1] Instalar y activar Dropbear en puerto 444"
            echo "[2] Iniciar Proxy WS/Directo (redirige al puerto Dropbear)"
            echo "[0] Volver"
            echo "--------------------------------------"
            read -p "Selecciona una opción: " option

            if [[ "$option" == "1" ]]; then
                if ! dpkg -s dropbear &>/dev/null; then
                    echo -e "\n[+] Instalando Dropbear..."
                    apt install dropbear -y > /dev/null 2>&1
                    if dpkg -s dropbear &>/dev/null; then
                        echo -e "\033[1;32m[ OK ]\033[0m Dropbear instalado correctamente."
                    else
                        echo -e "\033[1;31m[ FAIL ]\033[0m Error al instalar Dropbear."
                        read -p "Presiona enter para continuar..."
                        continue
                    fi
                fi

                echo -e "\n[+] Configurando Dropbear en puerto 444..."
                echo "/bin/false" >> /etc/shells
                echo "/usr/sbin/nologin" >> /etc/shells
                sed -i 's/^NO_START=1/NO_START=0/' /etc/default/dropbear
                sed -i 's/^DROPBEAR_PORT=.*/DROPBEAR_PORT=444/' /etc/default/dropbear
                echo 'DROPBEAR_EXTRA_ARGS="-p 444"' >> /etc/default/dropbear

                systemctl restart dropbear &>/dev/null || service dropbear restart &>/dev/null

                if pgrep dropbear > /dev/null && ss -tuln | grep -q ":444 "; then
                    echo -e "\033[1;32m[ OK ] Dropbear activado en puerto 444.\033[0m"
                else
                    echo -e "\033[1;31m[ FAIL ] Error: No se pudo iniciar Dropbear en el puerto 444.\033[0m"
                    journalctl -u dropbear -n 10 --no-pager
                fi
                read -p "Presiona enter para continuar..."
                continue
            fi

            if [[ "$option" == "2" ]]; then
                if ! pgrep dropbear > /dev/null; then
                    echo -e "\n\033[1;31m[ ERROR ] Dropbear no está activo. Instálalo primero.\033[0m"
                    read -p "Presiona enter para continuar..."
                    continue
                fi

                echo -e "\n[+] Configurando Proxy WS/Directo..."
                mkdir -p /etc/mccproxy

                if [ ! -f /etc/mccproxy/proxy.py ]; then
                    wget -q https://raw.githubusercontent.com/Mccarthey-Installer/Mccarthey-Installer/main/extras/proxy.py -O /etc/mccproxy/proxy.py
                    if [ -f /etc/mccproxy/proxy.py ] && [ -s /etc/mccproxy/proxy.py ]; then
                        echo -e "\033[1;32m[ OK ] Script proxy.py descargado correctamente.\033[0m"
                    else
                        echo -e "\033[1;31m[ FAIL ] Error al descargar proxy.py o el archivo está vacío.\033[0m"
                        read -p "Presiona enter para continuar..."
                        continue
                    fi
                fi

                if ! dpkg -s screen &>/dev/null; then
                    apt install screen -y > /dev/null 2>&1
                    if dpkg -s screen &>/dev/null; then
                        echo -e "\033[1;32m[ OK ] Screen instalado correctamente.\033[0m"
                    else
                        echo -e "\033[1;31m[ FAIL ] Error al instalar screen.\033[0m"
                        read -p "Presiona enter para continuar..."
                        continue
                    fi
                fi

                read -p "Puerto del Proxy (Ej: 80): " proxy_port
                read -p "Puerto destino (Dropbear, Ej: 444): " target_port
                read -p "Response (Ej: 101 para WS): " response

                if [[ -z "$proxy_port" || -z "$target_port" || -z "$response" ]]; then
                    echo -e "\033[1;31m[ ERROR ] Todos los campos son obligatorios.\033[0m"
                    read -p "Presiona enter para continuar..."
                    continue
                fi

                echo -e "\n[+] Iniciando Proxy en puerto $proxy_port -> $target_port (WS $response)"
                screen -dmS proxy python3 /etc/mccproxy/proxy.py "$proxy_port" "$target_port" "$response"

                sleep 2

                if screen -list | grep -q "proxy" && ss -tuln | grep -q ":$proxy_port "; then
                    echo -e "\033[1;32m[ OK ] Proxy WS/Directo activo en puerto $proxy_port\033[0m"
                else
                    echo -e "\033[1;31m[ FAIL ] Error: No se pudo iniciar el Proxy.\033[0m"
                fi
                read -p "Presiona enter para continuar..."
                continue
            fi

            if [[ "$option" == "0" ]]; then
                continue
            fi

            echo -e "\e[1;31mOpción no válida.\e[0m"
            read -p "Presiona enter para continuar..."
            continue
            ;;
        *)
            echo -e "\e[1;31mOpción no válida.\e[0m"
            sleep 2
            ;;
    esac
done
EOF

    chmod +x /root/menu.sh
    ln -sf /root/menu.sh /usr/bin/menu
    chmod +x /usr/bin/menu

    echo -e "\n\033[1;36m[ CONFIG ]\033[0m Configurando inicio automático del panel..."
    if ! grep -q "/usr/bin/menu" /root/.bashrc; then
        echo "[ -f /usr/bin/menu ] && /usr/bin/menu" >> /root/.bashrc
        echo -e "\033[1;32m[ OK ]\033[0m Inicio automático configurado."
    else
        echo -e "\033[1;33m[ INFO ]\033[0m Inicio automático ya estaba configurado."
    fi

    echo -e "\n\033[1;36m[ PANEL ]\033[0m Panel McCarthey instalado y listo para usar."
    echo "Ejecuta \033[1;33mmenu\033[0m para acceder."
fi

# FINAL
echo -e "\n\033[1;36m==============================================\033[0m"
echo -e "\033[1;33m      TU VPS ESTA LISTA PARA DESPEGAR!        \033[0m"
echo -e "\033[1;36m==============================================\033[0m"
echo -e "Puedes acceder al panel usando: \033[1;33mmenu\033[0m"
echo -e "Gracias por usar \033[1;35mMcCarthey Installer\033[0m!"
