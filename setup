#!/bin/bash

# ================================
# ███╗   ███╗ ██████╗ ██████╗ ███████╗
# ████╗ ████║██╔═══██╗██╔══██╗██╔════╝
# ██╔████╔██║██║   ██║██████╔╝█████╗  
# ██║╚██╔╝██║██║   ██║██╔═══╝ ██╔══╝  
# ██║ ╚═╝ ██║╚██████╔╝██║     ███████╗
# ╚═╝     ╚═╝ ╚═════╝ ╚═╝     ╚══════╝
#       McCarthey Installer v1.2
# ================================

# ARGUMENTOS
ENABLE_PANEL=false
for arg in "$@"; do
    if [[ "$arg" == "--mccpanel" ]]; then
        ENABLE_PANEL=true
    fi
done

# OBTENER MCC-KEY
KEY="$1"
if [[ "$KEY" == "--mccpanel" ]]; then
    KEY=""
fi

if [ -z "$KEY" ]; then
    clear
    echo -e "\e[1;34m"
    echo "============================================="
    echo "          having MCC-KEY NO PROPORCIONADA          "
    echo "============================================="
    echo -e "\e[0m"

    echo -e "\e[1;36m"
    echo "╔═══════════════════════════════════════════╗"
    echo "║           INGRESA TU MCC-KEY              ║"
    echo "╚═══════════════════════════════════════════╝"
    echo -e "\e[0m"

    read -p "> " KEY
fi

ENCODED_KEY=$(echo "$KEY" | sed 's/{/%7B/' | sed 's/}/%7D/')
VALIDATOR_URL="http://172.235.128.99:9393/validate/$ENCODED_KEY"

echo -e "\n\033[1;34m[ INFO ]\033[0m Verificando KEY con el servidor..."
RESPONSE=$(curl -s "$VALIDATOR_URL")
VALIDO=$(echo "$RESPONSE" | grep -o '"valida":true')

if [ -z "$VALIDO" ]; then
    MOTIVO=$(echo "$RESPONSE" | grep -oP '"motivo":"\K[^"]+')
    echo -e "\n\033[1;31m[ ERROR ]\033[0m Key inválida: $MOTIVO"
    exit 1
fi

USERNAME=$(echo "$RESPONSE" | grep -oP '"username":"\K[^"]+')
echo -e "\n\033[1;32m[ OK ]\033[0m Key válida. Continuando con la instalación..."
echo -e "\033[1;34mKey: Verified【  $USERNAME  】\033[0m"

# ACTUALIZACIÓN DEL SISTEMA
echo -e "\n\033[1;33m==============================================\033[0m"
echo -e "\033[1;33m      ACTUALIZANDO SISTEMA Y PAQUETES          \033[0m"
echo -e "\033[1;33m==============================================\033[0m"

apt update -y && apt upgrade -y
if command -v needrestart >/dev/null; then
    needrestart -r a
fi

apt install -y curl unzip wget

# INSTALACIÓN DE PAQUETES
PAQUETES=(
  bsdmainutils screen nginx nload htop python3 python3-pip
  nodejs npm lsof psmisc socat bc net-tools cowsay
  nmap jq iptables openssh-server dropbear
)

echo -e "\n\033[1;33m==============================================\033[0m"
echo -e "\033[1;33m          INSTALANDO PAQUETES NECESARIOS        \033[0m"
echo -e "\033[1;33m==============================================\033[0m"

for paquete in "${PAQUETES[@]}"; do
    apt install -y "$paquete" &>/dev/null
    if dpkg -s "$paquete" &>/dev/null; then
        echo -e "\033[1;32m[ OK ]\033[0m Instalación correcta: ${paquete^^}"
    else
        echo -e "\033[1;31m[ FAIL ]\033[0m Error al instalar: ${paquete^^}"
    fi
done

# CONFIGURAR OPENSSH EN PUERTO 22
echo -e "\n\033[1;33m==============================================\033[0m"
echo -e "\033[1;33m          CONFIGURANDO OPENSSH (PUERTO 22)      \033[0m"
echo -e "\033[1;33m==============================================\033[0m"

# Asegurarse de que OpenSSH esté habilitado y corriendo
systemctl enable ssh &>/dev/null
systemctl start ssh &>/dev/null

# Verificar que OpenSSH esté escuchando en el puerto 22
if ss -tuln | grep -q ":22 "; then
    echo -e "\033[1;32m[ OK ]\033[0m OpenSSH está activo en el puerto 22."
else
    # Intentar configurar el puerto 22 explícitamente
    sed -i 's/^#Port 22/Port 22/' /etc/ssh/sshd_config
    systemctl restart ssh &>/dev/null
    if ss -tuln | grep -q ":22 "; then
        echo -e "\033[1;32m[ OK ]\033[0m OpenSSH configurado y activo en el puerto 22."
    else
        echo -e "\033[1;31m[ FAIL ]\033[0m No se pudo activar OpenSSH en el puerto 22."
    fi
fi

# Asegurarse de que ufw permita el puerto 22
ufw allow 22 &>/dev/null
ufw enable &>/dev/null
echo -e "\033[1;32m[ OK ]\033[0m Puerto 22 permitido en ufw."

# INSTALACIÓN Y CONFIGURACIÓN AUTOMÁTICA DE DROPBEAR Y PROXY.PY
echo -e "\n\033[1;33m==============================================\033[0m"
echo -e "\033[1;33m      CONFIGURANDO DROPBEAR Y PROXY.PY         \033[0m"
echo -e "\033[1;33m==============================================\033[0m"

# Instalar Dropbear si no está instalado
if ! dpkg -s dropbear &>/dev/null; then
    echo -e "\n[+] Instalando Dropbear..."
    apt install dropbear -y > /dev/null 2>&1
    if dpkg -s dropbear &>/dev/null; then
        echo -e "\033[1;32m[ OK ]\033[0m Dropbear instalado correctamente."
    else
        echo -e "\033[1;31m[ FAIL ]\033[0m Error al instalar Dropbear."
        exit 1
    fi
fi

# Configurar Dropbear en puerto 444
echo -e "\n[+] Configurando Dropbear en puerto 444..."
echo "/bin/false" >> /etc/shells
echo "/usr/sbin/nologin" >> /etc/shells
sed -i 's/^NO_START=1/NO_START=0/' /etc/default/dropbear
sed -i 's/^DROPBEAR_PORT=.*/DROPBEAR_PORT=444/' /etc/default/dropbear
echo 'DROPBEAR_EXTRA_ARGS="-p 444"' >> /etc/default/dropbear

# Reiniciar Dropbear
systemctl restart dropbear &>/dev/null || service dropbear restart &>/dev/null

# Verificar si Dropbear está activo
if pgrep dropbear > /dev/null && ss -tuln | grep -q ":444 "; then
    echo -e "\033[1;32m[ OK ] Dropbear activado en puerto 444.\033[0m"
else
    echo -e "\033[1;31m[ FAIL ] Error: No se pudo iniciar Dropbear en el puerto 444.\033[0m"
    journalctl -u dropbear -n 10 --no-pager
    exit 1
fi

# Descargar e instalar proxy.py
echo -e "\n[+] Configurando Proxy WS/Directo..."
mkdir -p /etc/mccproxy

wget -q https://raw.githubusercontent.com/Mccarthey-Installer/Mccarthey-Installer/main/extras/proxy.py -O /etc/mccproxy/proxy.py
if [ -f /etc/mccproxy/proxy.py ]; then
    echo -e "\033[1;32m[ OK ] Script proxy.py descargado correctamente.\033[0m"
else
    echo -e "\033[1;31m[ FAIL ] Error al descargar proxy.py.\033[0m"
    exit 1
fi

# Instalar screen si no está instalado
if ! dpkg -s screen &>/dev/null; then
    apt install screen -y > /dev/null 2>&1
    if dpkg -s screen &>/dev/null; then
        echo -e "\033[1;32m[ OK ] Screen instalado correctamente.\033[0m"
    else
        echo -e "\033[1;31m[ FAIL ] Error al instalar screen.\033[0m"
        exit 1
    fi
fi

# Configurar proxy.py para que se ejecute automáticamente (puerto 80 -> 444, response 101)
PROXY_PORT=80
TARGET_PORT=444
RESPONSE=101

# Verificar si el puerto del proxy está disponible
if ss -tuln | grep -q ":$PROXY_PORT "; then
    echo -e "\033[1;31m[ ERROR ] El puerto $PROXY_PORT ya está en uso. Por favor libera el puerto.\033[0m"
    exit 1
fi

echo -e "\n[+] Iniciando Proxy en puerto $PROXY_PORT -> $TARGET_PORT (WS $RESPONSE)"
screen -dmS proxy python3 /etc/mccproxy/proxy.py "$PROXY_PORT" "$TARGET_PORT" "$RESPONSE"

# Verificar si el proxy está corriendo
if screen -list | grep -q "proxy"; then
    echo -e "\033[1;32m[ OK ] Proxy WS/Directo activo en puerto $PROXY_PORT\033[0m"
else
    echo -e "\033[1;31m[ FAIL ] Error: No se pudo iniciar el Proxy.\033[0m"
    exit 1
fi

# PANEL
if $ENABLE_PANEL; then
cat << 'EOF' > /root/menu.sh
#!/bin/bash

validar_key() {
  echo -e "\n\033[1;36m[ INFO ]\033[0m Descargando la última versión del instalador..."
  wget -q -O setup https://raw.githubusercontent.com/Mccarthey-Installer/Mccarthey-Installer/main/setup
  chmod +x setup
  echo -e "\033[1;32m[ OK ]\033[0m Script actualizado correctamente."
  echo -e "\n\033[1;36m[ INFO ]\033[0m Ejecutando el nuevo setup..."
  ./setup --mccpanel
  echo -e "\n\033[1;32m[ OK ]\033[0m Actualización completada. Reiniciando el panel..."
  exec /usr/bin/menu
}

# Datos del sistema
fecha=$(TZ=America/El_Salvador date +"%a %d/%m/%Y - %I:%M:%S %p %Z")
ip=$(hostname -I | awk '{print $1}')
cpu_model=$(awk -F: '/model name/ {print $2; exit}' /proc/cpuinfo)
cpus=$(nproc)
so=$(lsb_release -d | cut -f2)

read total used free shared buff_cache available <<< $(free -m | awk '/^Mem:/ {print $2, $3, $4, $5, $6, $7}')
cpu_uso=$(top -bn1 | grep "Cpu(s)" | awk '{print 100 - $8}')
cpu_uso_fmt=$(awk "BEGIN {printf \"%.1f%%\", $cpu_uso}")
ram_porc=$(awk "BEGIN {printf \"%.2f%%\", ($used/$total)*100}")

if [ "$total" -ge 1024 ]; then
  ram_total=$(awk "BEGIN {printf \"%.1fG\", $total/1024}")
  ram_libre=$(awk "BEGIN {printf \"%.1fG\", $available/1024}")
else
  ram_total="${total}M"
  ram_libre="${available}M"
fi

ram_usada=$(awk "BEGIN {printf \"%.0fM\", $used}")
ram_cache=$(awk "BEGIN {printf \"%.0fM\", $buff_cache}")

# Archivo para almacenar usuarios
USUARIOS_FILE="/root/usuarios_registrados.txt"

# PANEL
while true; do
  clear
  echo -e "\e[1;36m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\e[0m"
  echo -e "          \e[1;33mPANEL OFICIAL MCCARTHEY\e[0m"
  echo -e "\e[1;36m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\e[0m"
  echo -e " \e[1;35mFECHA       :\e[0m $fecha"
  echo -e " \e[1;35mIP VPS      :\e[0m $ip"
  echo -e " \e[1;35mCPU's       :\e[0m $cpus"
  echo -e " \e[1;35mMODELO CPU  :\e[0m $cpu_model"
  echo -e " \e[1;35mS.O         :\e[0m $so"
  echo -e "\e[1;36m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\e[0m"
  echo -e " \e[1;32m∘ TOTAL: $ram_total  ∘ LIBRE: $ram_libre  ∘ EN USO: $ram_usada\e[0m"
  echo -e " \e[1;32m∘ U/RAM: $ram_porc   ∘ U/CPU: $cpu_uso_fmt  ∘ BUFFER: $ram_cache\e[0m"
  echo -e "\e[1;36m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\e[0m"
  echo -e " \e[1;33m[1] ➮ CREAR NUEVO USUARIO SSH\e[0m "
  echo -e " \e[1;33m[2] ➮ ACTUALIZAR MCC-KEY\e[0m "
  echo -e " \e[1;33m[3] ➮ USUARIOS REGISTRADOS\e[0m "
  echo -e " \e[1;33m[4] ➮ ELIMINAR USUARIOS\e[0m "
  echo -e " \e[1;33m[5] ➮ SALIR\e[0m "
  echo -e " \e[1;33m[6] ➮ COLOCAR PUERTOS\e[0m "
  echo -e "\e[1;36m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\e[0m"
  echo -e -n "\e[1;33m► Elige una opción: \e[0m"
  read opc

  case $opc in
    1)
      read -p "Nombre de usuario: " USUARIO
      # Validar que el usuario no exista en el sistema (sensible a mayúsculas)
      if id "$USUARIO" >/dev/null 2>&1; then
        echo ""
        echo -e "\e[1;31mEl usuario $USUARIO ya existe en el sistema.\e[0m"
        echo ""
        read -p "Presiona enter para volver al panel principal..."
        continue
      fi
      # Validar que el usuario no exista en el archivo de registros
      if grep -q "^$USUARIO:" "$USUARIOS_FILE" 2>/dev/null; then
        echo ""
        echo -e "\e[1;31mEl usuario $USUARIO ya está registrado en el archivo.\e[0m"
        echo ""
        read -p "Presiona enter para volver al panel principal..."
        continue
      fi
      read -p "Contraseña: " PASSWORD
      read -p "Límite de conexiones: " LIMITE
      read -p "Días de validez: " DIAS

      # Validar que no estén vacíos
      if [[ -z "$USUARIO" || -z "$PASSWORD" || -z "$LIMITE" || -z "$DIAS" ]]; then
        echo ""
        echo -e "\e[1;31mPor favor complete todos los datos.\e[0m"
        echo ""
        read -p "Presiona enter para volver al panel principal..."
        continue
      fi

      # Validar que el límite sea un número positivo
      if ! [[ "$LIMITE" =~ ^[0-9]+$ ]] || [ "$LIMITE" -lt 1 ]; then
        echo ""
        echo -e "\e[1;31mEl límite de conexiones debe ser un número positivo.\e[0m"
        echo ""
        read -p "Presiona enter para volver al panel principal..."
        continue
      fi

      # Validar que los días sean un número positivo
      if ! [[ "$DIAS" =~ ^[0-9]+$ ]] || [ "$DIAS" -lt 1 ]; then
        echo ""
        echo -e "\e[1;31mLos días de validez deben ser un número positivo.\e[0m"
        echo ""
        read -p "Presiona enter para volver al panel principal..."
        continue
      fi

      FECHA_EXPIRACION=$(date -d "$DIAS days" +"%d/ de %B")
      useradd -e $(date -d "$DIAS days" +%Y-%m-%d) -s /bin/false -M "$USUARIO"
      echo "$USUARIO:$PASSWORD" | chpasswd

      # Guardar usuario en el archivo
      echo "$USUARIO:$PASSWORD:$LIMITE:$FECHA_EXPIRACION:$DIAS" >> "$USUARIOS_FILE"

      echo ""
      echo -e "\e[1;32mUsuario creado con éxito:\e[0m"
      echo ""
      echo -e "\e[1;35m$(printf '%-12s %-14s %-10s %-15s %-5s' 'USUARIO' 'CONTRASEÑA' 'LIMITE' 'CADUCA' 'DIAS')\e[0m"
      printf "%-12s %-14s %-10s %-15s %-5s\n" "$USUARIO" "$PASSWORD" "$LIMITE" "$FECHA_EXPIRACION" "$DIAS"
      echo ""
      read -p "Presiona enter para continuar..."
      ;;
    2)
      validar_key
      ;;
    3)
      clear
      echo -e "\e[1;36m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\e[0m"
      echo -e "          \e[1;33mUSUARIOS REGISTRADOS\e[0m"
      echo -e "\e[1;36m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\e[0m"
      if [[ -s "$USUARIOS_FILE" ]]; then
        echo -e "\e[1;35m$(printf '%-12s %-14s %-10s %-15s %-5s' 'USUARIO' 'CONTRASEÑA' 'LIMITE' 'CADUCA' 'DIAS')\e[0m"
        while IFS=: read -r usuario password limite caduca dias; do
          # Verificar que el usuario aún existe en el sistema
          if id "$usuario" >/dev/null 2>&1; then
            printf "%-12s %-14s %-10s %-15s %-5s\n" "$usuario" "$password" "$limite" "$caduca" "$dias"
          else
            # Eliminar usuario del archivo si no existe en el sistema
            sed -i "/^$usuario:/d" "$USUARIOS_FILE"
          fi
        done < "$USUARIOS_FILE"
        # Verificar si el archivo está vacío después de limpiar
        if [[ ! -s "$USUARIOS_FILE" ]]; then
          echo -e "\e[1;31mLista vacía. No hay usuarios registrados.\e[0m"
        fi
      else
        echo -e "\e[1;31mLista vacía. No hay usuarios registrados.\e[0m"
      fi
      echo -e "\e[1;36m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\e[0m"
      read -p "Presiona enter para volver al panel principal..."
      ;;
    4)
      clear
      echo -e "\e[1;36m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\e[0m"
      echo -e "          \e[1;33mELIMINAR USUARIOS\e[0m"
      echo -e "\e[1;36m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\e[0m"
      # Mostrar lista de usuarios registrados
      if [[ -s "$USUARIOS_FILE" ]]; then
        echo -e "\e[1;35m$(printf '%-12s %-14s %-10s %-15s %-5s' 'USUARIO' 'CONTRASEÑA' 'LIMITE' 'CADUCA' 'DIAS')\e[0m"
        while IFS=: read -r usuario password limite caduca dias; do
          # Verificar que el usuario aún existe en el sistema
          if id "$usuario" >/dev/null 2>&1; then
            printf "%-12s %-14s %-10s %-15s %-5s\n" "$usuario" "$password" "$limite" "$caduca" "$dias"
          else
            # Eliminar usuario del archivo si no existe en el sistema
            sed -i "/^$usuario:/d" "$USUARIOS_FILE"
          fi
        done < "$USUARIOS_FILE"
        # Verificar si el archivo está vacío después de limpiar
        if [[ ! -s "$USUARIOS_FILE" ]]; then
          echo -e "\e[1;31mLista vacía. No hay usuarios registrados.\e[0m"
        fi
      else
        echo -e "\e[1;31mLista vacía. No hay usuarios registrados.\e[0m"
      fi
      echo -e "\e[1;36m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\e[0m"
      echo -e "\e[1;33m[1] Eliminar un usuario específico\e[0m"
      echo -e "\e[1;33m[2] Eliminar todos los usuarios\e[0m"
      echo -e "\e[1;33m[3] Volver al panel principal\e[0m"
      echo -e "\e[1;36m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\e[0m"
      echo -e -n "\e[1;33m► Elige una opción: \e[0m"
      read del_opc

      case $del_opc in
        1)
          read -p "Nombre del usuario a eliminar: " USUARIO_DEL
          if [[ -z "$USUARIO_DEL" ]]; then
            echo -e "\e[1;31mPor favor ingrese un nombre de usuario.\e[0m"
            read -p "Presiona enter para continuar..."
            continue
          fi

          if ! id "$USUARIO_DEL" >/dev/null 2>&1; then
            echo -e "\e[1;31mEl usuario $USUARIO_DEL no existe.\e[0m"
            # Limpiar el archivo si el usuario está registrado pero no existe
            sed -i "/^$USUARIO_DEL:/d" "$USUARIOS_FILE" 2>/dev/null
            read -p "Presiona enter para continuar..."
            continue
          fi

          echo -e "\e[1;33m¿Estás seguro de eliminar al usuario $USUARIO_DEL? (s/n)\e[0m"
          read -p "Confirma: " confirm
          if [[ "$confirm" == "s" || "$confirm" == "S" ]]; then
            userdel -r "$USUARIO_DEL" 2>/dev/null
            # Eliminar usuario del archivo
            sed -i "/^$USUARIO_DEL:/d" "$USUARIOS_FILE"
            echo -e "\e[1;32mUsuario $USUARIO_DEL eliminado con éxito.\e[0m"
          else
            echo -e "\e[1;31mEliminación cancelada.\e[0m"
          fi
          read -p "Presiona enter para continuar..."
          ;;
        2)
          echo -e "\e[1;33m¿Estás seguro de eliminar TODOS los usuarios? (s/n)\e[0m"
          read -p "Confirma: " confirm
          if [[ "$confirm" == "s" || "$confirm" == "S" ]]; then
            if [[ -s "$USUARIOS_FILE" ]]; then
              while IFS=: read -r usuario _; do
                userdel -r "$usuario" 2>/dev/null
              done < "$USUARIOS_FILE"
              > "$USUARIOS_FILE"
              echo -e "\e[1;32mTodos los usuarios han sido eliminados.\e[0m"
            else
              echo -e "\e[1;31mNo hay usuarios para eliminar.\e[0m"
            fi
          else
            echo -e "\e[1;31mEliminación cancelada.\e[0m"
          fi
          read -p "Presiona enter para continuar..."
          ;;
        3)
          continue
          ;;
        *)
          echo -e "\e[1;31mOpción no válida.\e[0m"
          read -p "Presiona enter para continuar..."
          ;;
      esac
      ;;
    5)
      echo -e "\e[1;33mSaliendo del panel...\e[0m"
      exit 0
      ;;
    6)
      clear
      echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
      echo "     CONFIGURACIÓN DE PROXY + DROPBEAR"
      echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
      echo "[1] Instalar y activar Dropbear en puerto 444"
      echo "[2] Iniciar Proxy WS/Directo (redirige al puerto Dropbear)"
      echo "[0] Volver"
      echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
      read -p "Selecciona una opción: " option

      if [[ "$option" == "1" ]]; then
        # Verificar si Dropbear ya está instalado
        if ! dpkg -s dropbear &>/dev/null; then
          echo -e "\n[+] Instalando Dropbear..."
          apt install dropbear -y > /dev/null 2>&1
          if dpkg -s dropbear &>/dev/null; then
            echo -e "\033[1;32m[ OK ]\033[0m Dropbear instalado correctamente."
          else
            echo -e "\033[1;31m[ FAIL ]\033[0m Error al instalar Dropbear."
            read -p "Presiona enter para continuar..."
            continue
          fi
        fi

        # Configurar Dropbear
        echo -e "\n[+] Configurando Dropbear en puerto 444..."
        echo "/bin/false" >> /etc/shells
        echo "/usr/sbin/nologin" >> /etc/shells
        sed -i 's/^NO_START=1/NO_START=0/' /etc/default/dropbear
        sed -i 's/^DROPBEAR_PORT=.*/DROPBEAR_PORT=444/' /etc/default/dropbear
        echo 'DROPBEAR_EXTRA_ARGS="-p 444"' >> /etc/default/dropbear

        # Reiniciar Dropbear
        systemctl restart dropbear &>/dev/null || service dropbear restart &>/dev/null

        # Verificar si Dropbear está activo
        if pgrep dropbear > /dev/null && ss -tuln | grep -q ":444 "; then
          echo -e "\033[1;32m[✓] Dropbear activado en puerto 444.\033[0m"
        else
          echo -e "\033[1;31m[ FAIL ] Error: No se pudo iniciar Dropbear en el puerto 444.\033[0m"
          journalctl -u dropbear -n 10 --no-pager
        fi
        read -p "Presiona enter para continuar..."
        continue
      fi

      if [[ "$option" == "2" ]]; then
        # Verificar si Dropbear está activo
        if ! pgrep dropbear > /dev/null; then
          echo -e "\n\033[1;31m[!] Dropbear no está activo. Instálalo primero.\033[0m"
          read -p "Presiona enter para continuar..."
          continue
        fi

        echo -e "\n[+] Configurando Proxy WS/Directo..."
        mkdir -p /etc/mccproxy

        # Verificar si proxy.py ya está descargado
        if [ ! -f /etc/mccproxy/proxy.py ]; then
          wget -q https://raw.githubusercontent.com/Mccarthey-Installer/Mccarthey-Installer/main/extras/proxy.py -O /etc/mccproxy/proxy.py
          if [ -f /etc/mccproxy/proxy.py ]; then
            echo -e "\033[1;32m[ OK ] Script proxy.py descargado correctamente.\033[0m"
          else
            echo -e "\033[1;31m[ FAIL ] Error al descargar proxy.py.\033[0m"
            read -p "Presiona enter para continuar..."
            continue
          fi
        fi

        # Instalar screen si no está instalado
        if ! dpkg -s screen &>/dev/null; then
          apt install screen -y > /dev/null 2>&1
          if dpkg -s screen &>/dev/null; then
            echo -e "\033[1;32m[ OK ] Screen instalado correctamente.\033[0m"
          else
            echo -e "\033[1;31m[ FAIL ] Error al instalar screen.\033[0m"
            read -p "Presiona enter para continuar..."
            continue
          fi
        fi

        # Solicitar puertos y respuesta
        read -p "Puerto del Proxy (Ej: 80): " proxy_port
        read -p "Puerto destino (Dropbear, Ej: 444): " target_port
        read -p "Response (Ej: 101 para WS): " response

        # Validar entradas
        if [[ -z "$proxy_port" || -z "$target_port" || -z "$response" ]]; then
          echo -e "\033[1;31m[ ERROR ] Todos los campos son obligatorios.\033[0m"
          read -p "Presiona enter para continuar..."
          continue
        fi

        # Verificar si el puerto del proxy está disponible
        if ss -tuln | grep -q ":$proxy_port "; then
          echo -e "\033[1;31m[ ERROR ] El puerto $proxy_port ya está en uso.\033[0m"
          read -p "Presiona enter para continuar..."
          continue
        fi

        echo -e "\n[+] Iniciando Proxy en puerto $proxy_port -> $target_port (WS $response)"
        screen -dmS proxy python3 /etc/mccproxy/proxy.py "$proxy_port" "$target_port" "$response"

        # Verificar si el proxy está corriendo
        if screen -list | grep -q "proxy"; then
          echo -e "\033[1;32m[✓] Proxy WS/Directo activo en puerto $proxy_port\033[0m"
        else
          echo -e "\033[1;31m[ FAIL ] Error: No se pudo iniciar el Proxy.\033[0m"
        fi
        read -p "Presiona enter para continuar..."
        continue
      fi

      if [[ "$option" == "0" ]]; then
        continue
      fi

      echo -e "\e[1;31mOpción no válida.\e[0m"
      read -p "Presiona enter para continuar..."
      continue
      ;;
    *)
      echo -e "\e[1;31mOpción no válida.\e[0m"
      sleep 2
      ;;
  esac
done
EOF

chmod +x /root/menu.sh
ln -sf /root/menu.sh /usr/bin/menu
chmod +x /usr/bin/menu

# Configurar inicio automático del panel al iniciar sesión
echo -e "\n\033[1;36m[ CONFIG ]\033[0m Configurando inicio automático del panel..."
if ! grep -q "/usr/bin/menu" /root/.bashrc; then
    echo "[ -f /usr/bin/menu ] && /usr/bin/menu" >> /root/.bashrc
    echo -e "\033[1;32m[ OK ]\033[0m Inicio automático configurado."
else
    echo -e "\033[1;33m[ INFO ]\033[0m Inicio automático ya estaba configurado."
fi

echo -e "\n\033[1;36m[ PANEL ]\033[0m Panel McCarthey instalado y listo para usar."
echo "Ejecuta \033[1;33mmenu\033[0m para acceder."
fi

# FINAL
echo -e "\n\033[1;36m==============================================\033[0m"
echo -e "\033[1;33m      ¡TU VPS ESTÁ LISTA PARA DESPEGAR!         \033[0m"
echo -e "\033[1;36m==============================================\033[0m"
echo -e "Puedes acceder al panel usando: \033[1;33mmenu\033[0m"
echo -e "¡Gracias por usar \033[1;35mMcCarthey Installer\033[0m!"
