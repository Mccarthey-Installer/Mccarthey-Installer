#!/bin/bash

# ================================
# ███╗   ███╗ ██████╗ ██████╗ ███████╗
# ████╗ ████║██╔═══██╗██╔══██╗██╔════╝
# ██╔████╔██║██║   ██║██████╔╝█████╗  
# ██║╚██╔╝██║██║   ██║██╔═══╝ ██╔══╝  
# ██║ ╚═╝ ██║╚██████╔╝██║     ███████╗
# ╚═╝     ╚═╝ ╚═════╝ ╚═╝     ╚══════╝
#       McCarthey Installer v1.2
# ================================

# ARGUMENTOS
ENABLE_PANEL=false
for arg in "$@"; do
    if [[ "$arg" == "--mccpanel" ]]; then
        ENABLE_PANEL=true
    fi
done

# OBTENER MCC-KEY
KEY="$1"
if [[ "$KEY" == "--mccpanel" ]]; then
    KEY=""
fi

if [ -z "$KEY" ]; then
    clear
    echo -e "\e[1;34m"
    echo "============================================="
    echo "          having MCC-KEY NO PROPORCIONADA          "
    echo "============================================="
    echo -e "\e[0m"

    echo -e "\e[1;36m"
    echo "╔═══════════════════════════════════════════╗"
    echo "║           INGRESA TU MCC-KEY              ║"
    echo "╚═══════════════════════════════════════════╝"
    echo -e "\e[0m"

    read -p "> " KEY
fi

ENCODED_KEY=$(echo "$KEY" | sed 's/{/%7B/' | sed 's/}/%7D/')
VALIDATOR_URL="http://172.235.128.99:9393/validate/$ENCODED_KEY"

echo -e "\n\033[1;34m[ INFO ]\033[0m Verificando KEY con el servidor..."
RESPONSE=$(curl -s "$VALIDATOR_URL")
VALIDO=$(echo "$RESPONSE" | grep -o '"valida":true')

if [ -z "$VALIDO" ]; then
    MOTIVO=$(echo "$RESPONSE" | grep -oP '"motivo":"\K[^"]+')
    echo -e "\n\033[1;31m[ ERROR ]\033[0m Key inválida: $MOTIVO"
    exit 1
fi

USERNAME=$(echo "$RESPONSE" | grep -oP '"username":"\K[^"]+')
echo -e "\n\033[1;32m[ OK ]\033[0m Key válida. Continuando con la instalación..."
echo -e "\033[1;34mKey: Verified【  $USERNAME  】\033[0m"

# ACTUALIZACIÓN DEL SISTEMA
echo -e "\n\033[1;33m==============================================\033[0m"
echo -e "\033[1;33m      ACTUALIZANDO SISTEMA Y PAQUETES          \033[0m"
echo -e "\033[1;33m==============================================\033[0m"

apt update -y && apt upgrade -y
if command -v needrestart >/dev/null; then
    needrestart -r a
fi

apt install -y curl unzip wget ufw certbot python3-certbot-nginx build-essential cmake

# INSTALACIÓN DE PAQUETES
PAQUETES=(
  bsdmainutils screen nginx nload htop python3 python3-pip
  nodejs npm lsof psmisc socat bc net-tools cowsay
  nmap jq iptables openssh-server dropbear
)

echo -e "\n\033[1;33m==============================================\033[0m"
echo -e "\033[1;33m          INSTALANDO PAQUETES NECESARIOS        \033[0m"
echo -e "\033[1;33m==============================================\033[0m"

for paquete in "${PAQUETES[@]}"; do
    apt install -y "$paquete" &>/dev/null
    if dpkg -s "$paquete" &>/dev/null; then
        echo -e "\033[1;32m[ OK ]\033[0m Instalación correcta: ${paquete^^}"
    else
        echo -e "\033[1;31m[ FAIL ]\033[0m Error al instalar: ${paquete^^}"
    fi
done

# Instalar badvpn-udpgw manualmente
echo -e "\n\033[1;33m[ INFO ]\033[0m Instalando badvpn-udpgw..."
if ! command -v badvpn-udpgw >/dev/null; then
    wget -q https://github.com/ambrop72/badvpn/archive/refs/tags/1.999.130.tar.gz
    tar -xzf 1.999.130.tar.gz
    cd badvpn-1.999.130
    mkdir build
    cd build
    cmake .. -DCMAKE_INSTALL_PREFIX=/usr
    make
    make install
    cd ../..
    rm -rf badvpn-1.999.130 1.999.130.tar.gz
    if command -v badvpn-udpgw >/dev/null; then
        echo -e "\033[1;32m[ OK ]\033[0m Instalación correcta: BADVPN-UDPGW"
    else
        echo -e "\033[1;31m[ FAIL ]\033[0m Error al instalar: BADVPN-UDPGW"
    fi
else
    echo -e "\033[1;32m[ OK ]\033[0m BADVPN-UDPGW ya está instalado"
fi

# Configurar OpenSSH por defecto
systemctl enable ssh
systemctl start ssh
ufw allow 22

# PANEL
if $ENABLE_PANEL; then
cat << 'EOF' > /root/menu.sh
#!/bin/bash

validar_key() {
  echo -e "\n\033[1;36m[ INFO ]\033[0m Descargando la última versión del instalador..."
  wget -q -O setup https://raw.githubusercontent.com/Mccarthey-Installer/Mccarthey-Installer/main/setup
  chmod +x setup
  echo -e "\033[1;32m[ OK ]\033[0m Script actualizado correctamente."
  echo -e "\n\033[1;36m[ INFO ]\033[0m Ejecutando el nuevo setup..."
  ./setup --mccpanel
  echo -e "\n\033[1;32m[ OK ]\033[0m Actualización completada. Reiniciando el panel..."
  exec /usr/bin/menu
}

# Datos del sistema
fecha=$(TZ=America/El_Salvador date +"%a %d/%m/%Y - %I:%M:%S %p %Z")
ip=$(hostname -I | awk '{print $1}')
cpu_model=$(awk -F: '/model name/ {print $2; exit}' /proc/cpuinfo)
cpus=$(nproc)
so=$(lsb_release -d | cut -f2)

read total used free shared buff_cache available <<< $(free -m | awk '/^Mem:/ {print $2, $3, $4, $5, $6, $7}')
cpu_uso=$(top -bn1 | grep "Cpu(s)" | awk '{print 100 - $8}')
cpu_uso_fmt=$(awk "BEGIN {printf \"%.1f%%\", $cpu_uso}")
ram_porc=$(awk "BEGIN {printf \"%.2f%%\", ($used/$total)*100}")

if [ "$total" -ge 1024 ]; then
  ram_total=$(awk "BEGIN {printf \"%.1fG\", $total/1024}")
  ram_libre=$(awk "BEGIN {printf \"%.1fG\", $available/1024}")
else
  ram_total="${total}M"
  ram_libre="${available}M"
fi

ram_usada=$(awk "BEGIN {printf \"%.0fM\", $used}")
ram_cache=$(awk "BEGIN {printf \"%.0fM\", $buff_cache}")

# Archivo para almacenar usuarios
USUARIOS_FILE="/root/usuarios_registrados.txt"

# Archivo para almacenar estado de puertos
PUERTOS_FILE="/root/puertos_configurados.txt"

# Verificar estado de servicios
check_openssh() {
  if systemctl is-active --quiet ssh; then
    echo "✔"
  else
    echo "✘"
  fi
}

check_dropbear() {
  if systemctl is-active --quiet dropbear; then
    echo "✔"
  else
    echo "✘"
  fi
}

check_ssl() {
  if [ -f "/etc/letsencrypt/live/$DOMINIO/fullchain.pem" ]; then
    echo "✔"
  else
    echo "✘"
  fi
}

check_socks() {
  if systemctl is-active --quiet socks-python; then
    echo "✔"
  else
    echo "✘"
  fi
}

check_badvpn() {
  if systemctl is-active --quiet badvpn-udpgw; then
    echo "✔"
  else
    echo "✘"
  fi
}

# PANEL
while true; do
  clear
  echo -e "\e[1;36m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\e[0m"
  echo -e "          \e[1;33mPANEL OFICIAL MCCARTHEY\e[0m"
  echo -e "\e[1;36m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\e[0m"
  echo -e " \e[1;35mFECHA       :\e[0m $fecha"
  echo -e " \e[1;35mIP VPS      :\e[0m $ip"
  echo -e " \e[1;35mCPU's       :\e[0m $cpus"
  echo -e " \e[1;35mMODELO CPU  :\e[0m $cpu_model"
  echo -e " \e[1;35mS.O         :\e[0m $so"
  echo -e "\e[1;36m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\e[0m"
  echo -e " \e[1;32m∘ TOTAL: $ram_total  ∘ LIBRE: $ram_libre  ∘ EN USO: $ram_usada\e[0m"
  echo -e " \e[1;32m∘ U/RAM: $ram_porc   ∘ U/CPU: $cpu_uso_fmt  ∘ BUFFER: $ram_cache\e[0m"
  echo -e "\e[1;36m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\e[0m"
  echo -e " \e[1;33m[1] ➮ CREAR NUEVO USUARIO SSH\e[0m "
  echo -e " \e[1;33m[2] ➮ ACTUALIZAR MCC-KEY\e[0m "
  echo -e " \e[1;33m[3] ➮ USUARIOS REGISTRADOS\e[0m "
  echo -e " \e[1;33m[4] ➮ ELIMINAR USUARIOS\e[0m "
  echo -e " \e[1;33m[5] ➮ SALIR\e[0m "
  echo -e " \e[1;33m[6] ➮ ACTIVANDO PUERTOS\e[0m "
  echo -e "\e[1;36m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\e[0m"
  echo -e -n "\e[1;33m► Elige una opción: \e[0m"
  read opc

  case $opc in
    1)
      read -p "Nombre de usuario: " USUARIO
      # Validar que el usuario no exista en el sistema (sensible a mayúsculas)
      if id "$USUARIO" >/dev/null 2>&1; then
        echo ""
        echo -e "\e[1;31mEl usuario $USUARIO ya existe en el sistema.\e[0m"
        echo ""
        read -p "Presiona enter para volver al panel principal..."
        continue
      fi
      # Validar que el usuario no exista en el archivo de registros
      if grep -q "^$USUARIO:" "$USUARIOS_FILE" 2>/dev/null; then
        echo ""
        echo -e "\e[1;31mEl usuario $USUARIO ya está registrado en el archivo.\e[0m"
        echo ""
        read -p "Presiona enter para volver al panel principal..."
        continue
      fi
      read -p "Contraseña: " PASSWORD
      read -p "Límite de conexiones: " LIMITE
      read -p "Días de validez: " DIAS

      # Validar que no estén vacíos
      if [[ -z "$USUARIO" || -z "$PASSWORD" || -z "$LIMITE" || -z "$DIAS" ]]; then
        echo ""
        echo -e "\e[1;31mPor favor complete todos los datos.\e[0m"
        echo ""
        read -p "Presiona enter para volver al panel principal..."
        continue
      fi

      # Validar que el límite sea un número positivo
      if ! [[ "$LIMITE" =~ ^[0-9]+$ ]] || [ "$LIMITE" -lt 1 ]; then
        echo ""
        echo -e "\e[1;31mEl límite de conexiones debe ser un número positivo.\e[0m"
        echo ""
        read -p "Presiona enter para volver al panel principal..."
        continue
      fi

      # Validar que los días sean un número positivo
      if ! [[ "$DIAS" =~ ^[0-9]+$ ]] || [ "$DIAS" -lt 1 ]; then
        echo ""
        echo -e "\e[1;31mLos días de validez deben ser un número positivo.\e[0m"
        echo ""
        read -p "Presiona enter para volver al panel principal..."
        continue
      fi

      FECHA_EXPIRACION=$(date -d "$DIAS days" +"%d/ de %B")
      useradd -e $(date -d "$DIAS days" +%Y-%m-%d) -s /bin/false -M "$USUARIO"
      echo "$USUARIO:$PASSWORD" | chpasswd

      # Guardar usuario en el archivo
      echo "$USUARIO:$PASSWORD:$LIMITE:$FECHA_EXPIRACION:$DIAS" >> "$USUARIOS_FILE"

      echo ""
      echo -e "\e[1;32mUsuario creado con éxito:\e[0m"
      echo ""
      echo -e "\e[1;35m$(printf '%-12s %-14s %-10s %-15s %-5s' 'USUARIO' 'CONTRASEÑA' 'LIMITE' 'CADUCA' 'DIAS')\e[0m"
      printf "%-12s %-14s %-10s %-15s %-5s\n" "$USUARIO" "$PASSWORD" "$LIMITE" "$FECHA_EXPIRACION" "$DIAS"
      echo ""
      read -p "Presiona enter para continuar..."
      ;;
    2)
      validar_key
      ;;
    3)
      clear
      echo -e "\e[1;36m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\e[0m"
      echo -e "          \e[1;33mUSUARIOS REGISTRADOS\e[0m"
      echo -e "\e[1;36m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\e[0m"
      if [[ -s "$USUARIOS_FILE" ]]; then
        echo -e "\e[1;35m$(printf '%-12s %-14s %-10s %-15s %-5s' 'USUARIO' 'CONTRASEÑA' 'LIMITE' 'CADUCA' 'DIAS')\e[0m"
        while IFS=: read -r usuario password limite caduca dias; do
          # Verificar que el usuario aún existe en el sistema
          if id "$usuario" >/dev/null 2>&1; then
            printf "%-12s %-14s %-10s %-15s %-5s\n" "$usuario" "$password" "$limite" "$caduca" "$dias"
          else
            # Eliminar usuario del archivo si no existe en el sistema
            sed -i "/^$usuario:/d" "$USUARIOS_FILE"
          fi
        done < "$USUARIOS_FILE"
        # Verificar si el archivo está vacío después de limpiar
        if [[ ! -s "$USUARIOS_FILE" ]]; then
          echo -e "\e[1;31mLista vacía. No hay usuarios registrados.\e[0m"
        fi
      else
        echo -e "\e[1;31mLista vacía. No hay usuarios registrados.\e[0m"
      fi
      echo -e "\e[1;36m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\e[0m"
      read -p "Presiona enter para volver al panel principal..."
      ;;
    4)
      clear
      echo -e "\e[1;36m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\e[0m"
      echo -e "          \e[1;33mELIMINAR USUARIOS\e[0m"
      echo -e "\e[1;36m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\e[0m"
      # Mostrar lista de usuarios registrados
      if [[ -s "$USUARIOS_FILE" ]]; then
        echo -e "\e[1;35m$(printf '%-12s %-14s %-10s %-15s %-5s' 'USUARIO' 'CONTRASEÑA' 'LIMITE' 'CADUCA' 'DIAS')\e[0m"
        while IFS=: read -r usuario password limite caduca dias; do
          # Verificar que el usuario aún existe en el sistema
          if id "$usuario" >/dev/null 2>&1; then
            printf "%-12s %-14s %-10s %-15s %-5s\n" "$usuario" "$password" "$limite" "$caduca" "$dias"
          else
            # Eliminar usuario del archivo si no existe en el sistema
            sed -i "/^$usuario:/d" "$USUARIOS_FILE"
          fi
        done < "$USUARIOS_FILE"
        # Verificar si el archivo está vacío después de limpiar
        if [[ ! -s "$USUARIOS_FILE" ]]; then
          echo -e "\e[1;31mLista vacía. No hay usuarios registrados.\e[0m"
        fi
      else
        echo -e "\e[1;31mLista vacía. No hay usuarios registrados.\e[0m"
      fi
      echo -e "\e[1;36m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\e[0m"
      echo -e "\e[1;33m[1] Eliminar un usuario específico\e[0m"
      echo -e "\e[1;33m[2] Eliminar todos los usuarios\e[0m"
      echo -e "\e[1;33m[3] Volver al panel principal\e[0m"
      echo -e "\e[1;36m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\e[0m"
      echo -e -n "\e[1;33m► Elige una opción: \e[0m"
      read del_opc

      case $del_opc in
        1)
          read -p "Nombre del usuario a eliminar: " USUARIO_DEL
          if [[ -z "$USUARIO_DEL" ]]; then
            echo -e "\e[1;31mPor favor ingrese un nombre de usuario.\e[0m"
            read -p "Presiona enter para continuar..."
            continue
          fi

          if ! id "$USUARIO_DEL" >/dev/null 2>&1; then
            echo -e "\e[1;31mEl usuario $USUARIO_DEL no existe.\e[0m"
            # Limpiar el archivo si el usuario está registrado pero no existe
            sed -i "/^$USUARIO_DEL:/d" "$USUARIOS_FILE" 2>/dev/null
            read -p "Presiona enter para continuar..."
            continue
          fi

          echo -e "\e[1;33m¿Estás seguro de eliminar al usuario $USUARIO_DEL? (s/n)\e[0m"
          read -p "Confirma: " confirm
          if [[ "$confirm" == "s" || "$confirm" == "S" ]]; then
            userdel -r "$USUARIO_DEL" 2>/dev/null
            # Eliminar usuario del archivo
            sed -i "/^$USUARIO_DEL:/d" "$USUARIOS_FILE"
            echo -e "\e[1;32mUsuario $USUARIO_DEL eliminado con éxito.\e[0m"
          else
            echo -e "\e[1;31mEliminación cancelada.\e[0m"
          fi
          read -p "Presiona enter para continuar..."
          ;;
        2)
          echo -e "\e[1;33m¿Estás seguro de eliminar TODOS los usuarios? (s/n)\e[0m"
          read -p "Confirma: " confirm
          if [[ "$confirm" == "s" || "$confirm" == "S" ]]; then
            if [[ -s "$USUARIOS_FILE" ]]; then
              while IFS=: read -r usuario _; do
                userdel -r "$usuario" 2>/dev/null
              done < "$USUARIOS_FILE"
              > "$USUARIOS_FILE"
              echo -e "\e[1;32mTodos los usuarios han sido eliminados.\e[0m"
            else
              echo -e "\e[1;31mNo hay usuarios para eliminar.\e[0m"
            fi
          else
            echo -e "\e[1;31mEliminación cancelada.\e[0m"
          fi
          read -p "Presiona enter para continuar..."
          ;;
        3)
          continue
          ;;
        *)
          echo -e "\e[1;31mOpción no válida.\e[0m"
          read -p "Presiona enter para continuar..."
          ;;
      esac
      ;;
    5)
      echo -e "\e[1;33mSaliendo del panel...\e[0m"
      exit 0
      ;;
    6)
      clear
      echo -e "\e[1;36m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\e[0m"
      echo -e "          \e[1;33mACTIVANDO PUERTOS\e[0m"
      echo -e "\e[1;36m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\e[0m"
      echo -e " \e[1;33m[1] OpenSSH (22) [$(check_openssh)]\e[0m"
      echo -e " \e[1;33m[2] Dropbear [$(check_dropbear)]\e[0m"
      echo -e " \e[1;33m[3] SSL/TLS [$(check_ssl)]\e[0m"
      echo -e " \e[1;33m[4] Socks Python Directo (WS) [$(check_socks)]\e[0m"
      echo -e " \e[1;33m[5] BadVPN [$(check_badvpn)]\e[0m"
      echo -e " \e[1;33m[6] Volver al panel principal\e[0m"
      echo -e "\e[1;36m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\e[0m"
      echo -e -n "\e[1;33m► Elige una opción: \e[0m"
      read port_opc

      case $port_opc in
        1)
          echo -e "\e[1;33mOpenSSH está activo por defecto (puerto 22).\e[0m"
          systemctl enable ssh
          systemctl start ssh
          ufw allow 22
          echo -e "\e[1;32mOpenSSH verificado y activo.\e[0m"
          read -p "Presiona enter para continuar..."
          ;;
        2)
          read -p "Ingrese el puerto para Dropbear (ej. 443): " DROPBEAR_PORT
          if ! [[ "$DROPBEAR_PORT" =~ ^[0-9]+$ ]] || [ "$DROPBEAR_PORT" -lt 1 ] || [ "$DROPBEAR_PORT" -gt 65535 ]; then
            echo -e "\e[1;31mPuerto inválido. Debe ser un número entre 1 y 65535.\e[0m"
            read -p "Presiona enter para continuar..."
            continue
          fi
          # Configurar Dropbear
          sed -i "s/PORT=.*$/PORT=$DROPBEAR_PORT/" /etc/default/dropbear
          systemctl enable dropbear
          systemctl start dropbear
          ufw allow $DROPBEAR_PORT
          echo "DROPBEAR_PORT=$DROPBEAR_PORT" > "$PUERTOS_FILE"
          echo -e "\e[1;32mDropbear activado en el puerto $DROPBEAR_PORT.\e[0m"
          read -p "Presiona enter para continuar..."
          ;;
        3)
          read -p "Ingrese el dominio (ej. vpn.tudominio.com): " DOMINIO
          read -p "Ingrese el puerto local (ej. 22): " LOCAL_PORT
          read -p "Ingrese el puerto SSL (ej. 443): " SSL_PORT
          if ! [[ "$LOCAL_PORT" =~ ^[0-9]+$ ]] || ! [[ "$SSL_PORT" =~ ^[0-9]+$ ]]; then
            echo -e "\e[1;31mPuertos inválidos. Deben ser números.\e[0m"
            read -p "Presiona enter para continuar..."
            continue
          fi
          # Generar certificado SSL con certbot
          certbot --nginx -d "$DOMINIO" --non-interactive --agree-tos --email admin@$DOMINIO
          # Configurar stunnel o similar para SSL/TLS
          cat << EOT > /etc/stunnel/stunnel.conf
[ssh]
accept = $SSL_PORT
connect = 127.0.0.1:$LOCAL_PORT
cert = /etc/letsencrypt/live/$DOMINIO/fullchain.pem
key = /etc/letsencrypt/live/$DOMINIO/privkey.pem
EOT
          systemctl enable stunnel4
          systemctl start stunnel4
          ufw allow $SSL_PORT
          echo "SSL_PORT=$SSL_PORT" >> "$PUERTOS_FILE"
          echo -e "\e[1;32mSSL/TLS configurado para $DOMINIO en puerto $SSL_PORT.\e[0m"
          read -p "Presiona enter para continuar..."
          ;;
        4)
          if ! systemctl is-active --quiet dropbear; then
            echo -e "\e[1;31mDropbear debe estar activo primero.\e[0m"
            read -p "Presiona enter para continuar..."
            continue
          fi
          DROPBEAR_PORT=$(grep "DROPBEAR_PORT" "$PUERTOS_FILE" | cut -d'=' -f2)
          read -p "Ingrese el puerto adicional para Socks (ej. 101): " SOCKS_PORT
          if ! [[ "$SOCKS_PORT" =~ ^[0-9]+$ ]] || [ "$SOCKS_PORT" -lt 1 ] || [ "$SOCKS_PORT" -gt 65535 ]; then
            echo -e "\e[1;31mPuerto inválido. Debe ser un número entre 1 y 65535.\e[0m"
            read -p "Presiona enter para continuar..."
            continue
          fi
          # Configurar Socks Python (placeholder, necesita script real)
          ufw allow 80
          ufw allow $DROPBEAR_PORT
          ufw allow $SOCKS_PORT
          # Placeholder para Socks Python
          echo -e "\e[1;33m[ INFO ]\033[0m Socks Python requiere un script personalizado."
          echo -e "\e[1;32mPuertos 80, $DROPBEAR_PORT y $SOCKS_PORT abiertos.\e[0m"
          read -p "Presiona enter para continuar..."
          ;;
        5)
          if ! command -v badvpn-udpgw >/dev/null; then
            echo -e "\e[1;31mBadVPN no está instalado. Por favor, instálalo primero.\e[0m"
            read -p "Presiona enter para continuar..."
            continue
          fi
          read -p "Ingrese el puerto para BadVPN (ej. 7300): " BADVPN_PORT
          if ! [[ "$BADVPN_PORT" =~ ^[0-9]+$ ]] || [ "$BADVPN_PORT" -lt 1 ] || [ "$BADVPN_PORT" -gt 65535 ]; then
            echo -e "\e[1;31mPuerto inválido. Debe ser un número entre 1 y 65535.\e[0m"
            read -p "Presiona enter para continuar..."
            continue
          fi
          # Configurar BadVPN
          cat << EOT > /etc/systemd/system/badvpn-udpgw.service
[Unit]
Description=BadVPN UDP Gateway
After=network.target

[Service]
ExecStart=/usr/bin/badvpn-udpgw --listen-addr 127.0.0.1:$BADVPN_PORT
Restart=always

[Install]
WantedBy=multi-user.target
EOT
          systemctl enable badvpn-udpgw
          systemctl start badvpn-udpgw
          ufw allow $BADVPN_PORT
          echo "BADVPN_PORT=$BADVPN_PORT" >> "$PUERTOS_FILE"
          echo -e "\e[1;32mBadVPN activado en puerto $BADVPN_PORT.\e[0m"
          read -p "Presiona enter para continuar..."
          ;;
        6)
          continue
          ;;
        *)
          echo -e "\e[1;31mOpción no válida.\e[0m"
          read -p "Presiona enter para continuar..."
          ;;
      esac
      ;;
    *)
      echo -e "\e[1;31mOpción no válida.\e[0m"
      sleep 2
      ;;
  esac
done
EOF

# Verificar que el archivo menu.sh se generó correctamente
if [ -s /root/menu.sh ]; then
    chmod +x /root/menu.sh
    ln -sf /root/menu.sh /usr/bin/menu
    chmod +x /usr/bin/menu
    echo -e "\n\033[1;36m[ PANEL ]\033[0m Panel McCarthey instalado y listo para usar."
    echo "Ejecuta \033[1;33mmenu\033[0m para acceder."
else
    echo -e "\n\033[1;31m[ ERROR ]\033[0m Fallo al generar /root/menu.sh. Verifica el script."
    exit 1
fi

# Configurar inicio automático del panel al iniciar sesión
echo -e "\n\033[1;36m[ CONFIG ]\033[0m Configurando inicio automático del panel..."
if ! grep -q "/usr/bin/menu" /root/.bashrc; then
    echo "[ -f /usr/bin/menu ] && /usr/bin/menu" >> /root/.bashrc
    echo -e "\033[1;32m[ OK ]\033[0m Inicio automático configurado."
else
    echo -e "\033[1;33m[ INFO ]\033[0m Inicio automático ya estaba configurado."
fi

# FINAL
echo -e "\n\033[1;36m==============================================\033[0m"
echo -e "\033[1;33m      ¡TU VPS ESTÁ LISTA PARA DESPEGAR!         \033[0m"
echo -e "\033[1;36m==============================================\033[0m"
echo -e "Puedes acceder al panel usando: \033[1;33mmenu\033[0m"
echo -e "¡Gracias por usar \033[1;35mMcCarthey Installer\033[0m!"
