#!/bin/bash

# ================================
# ███╗   ███╗ ██████╗ ██████╗ ███████╗
# ████╗ ████║██╔═══██╗██╔══██╗██╔════╝
# ██╔████╔██║██║   ██║██████╔╝█████╗  
# ██║╚██╔╝██║██║   ██║██╔═══╝ ██╔══╝  
# ██║ ╚═╝ ██║╚██████╔╝██║     ███████╗
# ╚═╝     ╚═╝ ╚═════╝ ╚═╝     ╚══════╝
#       McCarthey Installer v1.2
# ================================

# ARGUMENTOS
ENABLE_PANEL=false
for arg in "$@"; do
    if [[ "$arg" == "--mccpanel" ]]; then
        ENABLE_PANEL=true
    fi
done

# OBTENER MCC-KEY
KEY="$1"
if [[ "$KEY" == "--mccpanel" ]]; then
    KEY=""
fi

if [ -z "$KEY" ]; then
    clear
    echo -e "\e[1;34m"
    echo "============================================="
    echo "          having MCC-KEY NO PROPORCIONADA          "
    echo "============================================="
    echo -e "\e[0m"

    echo -e "\e[1;36m"
    echo "╔═══════════════════════════════════════════╗"
    echo "║           INGRESA TU MCC-KEY              ║"
    echo "╚═══════════════════════════════════════════╝"
    echo -e "\e[0m"

    read -p "> " KEY
fi

ENCODED_KEY=$(echo "$KEY" | sed 's/{/%7B/' | sed 's/}/%7D/')
VALIDATOR_URL="http://172.235.128.99:9393/validate/$ENCODED_KEY"

echo -e "\n\033[1;34m[ INFO ]\033[0m Verificando KEY con el servidor..."
RESPONSE=$(curl -s "$VALIDATOR_URL")
VALIDO=$(echo "$RESPONSE" | grep -o '"valida":true')

if [ -z "$VALIDO" ]; then
    MOTIVO=$(echo "$RESPONSE" | grep -oP '"motivo":"\K[^"]+')
    echo -e "\n\033[1;31m[ ERROR ]\033[0m Key inválida: $MOTIVO"
    exit 1
fi

USERNAME=$(echo "$RESPONSE" | grep -oP '"username":"\K[^"]+')
echo -e "\n\033[1;32m[ OK ]\033[0m Key válida. Continuando con la instalación..."
echo -e "\033[1;34mKey: Verified【  $USERNAME  】\033[0m"

# ACTUALIZACIÓN DEL SISTEMA
echo -e "\n\033[1;33m==============================================\033[0m"
echo -e "\033[1;33m      ACTUALIZANDO SISTEMA Y PAQUETES          \033[0m"
echo -e "\033[1;33m==============================================\033[0m"

apt update -y && apt upgrade -y
if command -v needrestart >/dev/null; then
    needrestart -r a
fi

apt install -y curl unzip wget

# INSTALACIÓN DE PAQUETES
PAQUETES=(
  bsdmainutils screen nginx nload htop python3 python3-pip
  nodejs npm lsof psmisc socat bc net-tools cowsay
  nmap jq iptables
)

echo -e "\n\033[1;33m==============================================\033[0m"
echo -e "\033[1;33m          INSTALANDO PAQUETES NECESARIOS        \033[0m"
echo -e "\033[1;33m==============================================\033[0m"

for paquete in "${PAQUETES[@]}"; do
    apt install -y "$paquete" &>/dev/null
    if dpkg -s "$paquete" &>/dev/null; then
        echo -e "\033[1;32m[ OK ]\033[0m Instalación correcta: ${paquete^^}"
    else
        echo -e "\033[1;31m[ FAIL ]\033[0m Error al instalar: ${paquete^^}"
    fi
done

#!/bin/bash

USUARIOS_FILE="/root/usuarios_registrados.txt"

validar_key() {
  echo -e "\n\033[1;34m[ INFO ]\033[0m Descargando la última versión del instalador..."
  wget -q -O setup https://raw.githubusercontent.com/Mccarthey-Installer/Mccarthey-Installer/main/setup
  chmod +x setup
  echo -e "\033[1;32m[ OK ]\033[0m Script actualizado correctamente."
  echo -e "\n\033[1;34m[ INFO ]\033[0m Ejecutando el nuevo setup..."
  ./setup --mccpanel
  echo -e "\n\033[1;32m[ OK ]\033[0m Actualización completada. Reiniciando el panel..."
  exec /usr/bin/menu
}

# Función para listar usuarios guardados
listar_usuarios() {
  clear
  echo -e "\e[1;32m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\e[0m"
  echo -e "        \e[1mUSUARIOS REGISTRADOS\e[0m"
  echo -e "\e[1;32m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\e[0m"
  if [[ ! -s $USUARIOS_FILE ]]; then
    echo -e "\e[1;33mLista vacía. No hay usuarios registrados.\e[0m"
  else
    echo -e "\e[1;35m$(printf '%-12s %-14s %-10s %-15s %-5s' 'USUARIO' 'CONTRASEÑA' 'LIMITE' 'CADUCA' 'DIAS')\e[0m"
    cat "$USUARIOS_FILE"
  fi
  echo ""
  read -p "Presiona enter para volver al menú..."
}

# Función para eliminar usuarios
eliminar_usuarios() {
  clear
  echo -e "\e[1;32m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\e[0m"
  echo -e "           \e[1mELIMINAR USUARIOS\e[0m"
  echo -e "\e[1;32m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\e[0m"
  echo "Para eliminar todos los usuarios, escribe: TODOS"
  echo "Para eliminar un usuario específico, escribe su nombre de usuario."
  echo ""
  read -p "Nombre de usuario a eliminar (o TODOS): " usuario_elim

  if [[ "$usuario_elim" == "TODOS" ]]; then
    read -p "¿Estás seguro que deseas eliminar TODOS los usuarios? (s/n): " confirm
    if [[ "$confirm" =~ ^[Ss]$ ]]; then
      # Eliminar todos los usuarios creados en el archivo y del sistema
      if [[ -s $USUARIOS_FILE ]]; then
        while read -r linea; do
          nombre=$(echo "$linea" | awk '{print $1}')
          userdel -r "$nombre" 2>/dev/null
        done < "$USUARIOS_FILE"
      fi
      > "$USUARIOS_FILE"
      echo -e "\e[1;31mTodos los usuarios han sido eliminados.\e[0m"
    else
      echo "Operación cancelada."
    fi
  else
    if id "$usuario_elim" &>/dev/null; then
      read -p "¿Confirmas eliminar el usuario '$usuario_elim'? (s/n): " confirm
      if [[ "$confirm" =~ ^[Ss]$ ]]; then
        userdel -r "$usuario_elim" 2>/dev/null
        # Eliminar del archivo usuarios_registrados.txt
        if [[ -s $USUARIOS_FILE ]]; then
          grep -v "^$usuario_elim " "$USUARIOS_FILE" > "${USUARIOS_FILE}.tmp" && mv "${USUARIOS_FILE}.tmp" "$USUARIOS_FILE"
        fi
        echo -e "\e[1;31mUsuario '$usuario_elim' eliminado correctamente.\e[0m"
      else
        echo "Operación cancelada."
      fi
    else
      echo -e "\e[1;33mEl usuario '$usuario_elim' no existe.\e[0m"
    fi
  fi
  echo ""
  read -p "Presiona enter para volver al menú..."
}

# Datos del sistema
fecha=$(TZ=America/El_Salvador date +"%a %d/%m/%Y - %I:%M:%S %p %Z")
ip=$(hostname -I | awk '{print $1}')
cpu_model=$(awk -F: '/model name/ {print $2; exit}' /proc/cpuinfo)
cpus=$(nproc)
so=$(lsb_release -d | cut -f2)

read total used free shared buff_cache available <<< $(free -m | awk '/^Mem:/ {print $2, $3, $4, $5, $6, $7}')
cpu_uso=$(top -bn1 | grep "Cpu(s)" | awk '{print 100 - $8}')
cpu_uso_fmt=$(awk "BEGIN {printf \"%.1f%%\", $cpu_uso}")
ram_porc=$(awk "BEGIN {printf \"%.2f%%\", ($used/$total)*100}")

if [ "$total" -ge 1024 ]; then
  ram_total=$(awk "BEGIN {printf \"%.1fG\", $total/1024}")
  ram_libre=$(awk "BEGIN {printf \"%.1fG\", $available/1024}")
else
  ram_total="${total}M"
  ram_libre="${available}M"
fi

ram_usada=$(awk "BEGIN {printf \"%.0fM\", $used}")
ram_cache=$(awk "BEGIN {printf \"%.0fM\", $buff_cache}")

# PANEL
while true; do
  clear
  echo -e "\e[1;32m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\e[0m"
  echo -e "          \e[1mPANEL OFICIAL MCCARTHEY\e[0m"
  echo -e "\e[1;32m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\e[0m"
  echo -e " FECHA       : $fecha"
  echo -e " IP VPS      : $ip"
  echo -e " CPU's       : $cpus"
  echo -e " MODELO CPU  :$cpu_model"
  echo -e " S.O         : $so"
  echo -e "\e[1;32m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\e[0m"
  echo -e " ∘ TOTAL: $ram_total  ∘ LIBRE: $ram_libre  ∘ EN USO: $ram_usada"
  echo -e " ∘ U/RAM: $ram_porc   ∘ U/CPU: $cpu_uso_fmt  ∘ BUFFER: $ram_cache"
  echo -e "\e[1;32m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\e[0m"
  echo -e " [1] ➮ CREAR NUEVO USUARIO SSH"
  echo -e " [2] ➮ USUARIOS REGISTRADOS"
  echo -e " [3] ➮ ELIMINAR USUARIOS"
  echo -e " [4] ➮ ACTUALIZAR MCC-KEY"
  echo -e " [5] ➮ SALIR"
  echo -e "\e[1;32m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\e[0m"
  read -p "► Elige una opción: " opc

  case $opc in
    1)
      read -p "Nombre de usuario: " USUARIO
      read -p "Contraseña: " PASSWORD
      read -p "Días de validez: " DIAS

      # Validar que no estén vacíos
      if [[ -z "$USUARIO" || -z "$PASSWORD" || -z "$DIAS" ]]; then
        echo ""
        echo -e "\e[1;31mPor favor complete todos los datos.\e[0m"
        echo ""
        read -p "Presiona enter para volver al panel principal..."
        continue
      fi

      if id "$USUARIO" &>/dev/null; then
        echo -e "\e[1;31mEl usuario '$USUARIO' ya existe.\e[0m"
        read -p "Presiona enter para continuar..."
        continue
      fi

      FECHA_EXPIRACION=$(date -d "$DIAS days" +"%d/ de %B")
      useradd -e $(date -d "$DIAS days" +%Y-%m-%d) -s /bin/false -M $USUARIO
      echo "$USUARIO:$PASSWORD" | chpasswd
      echo ""
      echo "Usuario creado con éxito:"
      echo ""
      echo -e "\e[1;35m$(printf '%-12s %-14s %-10s %-15s %-5s' 'USUARIO' 'CONTRASEÑA' 'LIMITE' 'CADUCA' 'DIAS')\e[0m"
      printf "%-12s %-14s %-10s %-15s %-5s\n" "$USUARIO" "$PASSWORD" "1" "$FECHA_EXPIRACION" "$DIAS"
      echo ""

      # Guardar usuario en archivo
      echo -e "$(printf '%-12s %-14s %-10s %-15s %-5s' "$USUARIO" "$PASSWORD" "1" "$FECHA_EXPIRACION" "$DIAS")" >> "$USUARIOS_FILE"

      read -p "Presiona enter para continuar..."
      ;;
    2)
      listar_usuarios
      ;;
    3)
      eliminar_usuarios
      ;;
    4)
      validar_key
      ;;
    5)
      echo "Saliendo del panel..."
      exit 0
      ;;
    *)
      echo "Opción no válida."
      sleep 2
      ;;
  esac
done

